{
  "paragraphs": [
    {
      "text": "print(\"\"\"%html\n\u003ccenter\u003e\n    \u003ch1\u003eProgramación Distribuida sobre Grandes Volúmenes de Datos\u003c/h1\u003e\n\u003c/center\u003e\n\n\u003cbr\u003e\n\n\u003ch3 style\u003d\"text-align:center;\"\u003e\n    \u003ca href\u003d\"http://www.famaf.unc.edu.ar\"\u003e\n    Facultad de Matemática Astronomía Física y Computación\n    \u003c/a\u003e\n\u003cbr/\u003e\n    \u003ca href\u003d\"http://www.unc.edu.ar\"\u003e\n    Universidad Nacional de Córdoba\n    \u003c/a\u003e\n\u003cbr/\u003e\n    \u003ccenter\u003e\n    \u003ca href\u003d\"http://www.famaf.unc.edu.ar\"\u003e\n    \u003cimg src\u003d\"https://cs.famaf.unc.edu.ar/~damian/bigdata/curso/posgrado_optativa/lectivo/presentaciones/comun/logo%20UNC%20FAMAF%202016.svg\" alt\u003d\"Drawing\" style\u003d\"width:50%;\"/\u003e\n    \u003c/a\u003e\n    \u003c/center\u003e\n\u003c/h3\u003e\n\n\u003ch4 style\u003d\"text-align:center;\"\u003e Damián Barsotti  \u003c/h4\u003e\n\n\u003cp style\u003d\"font-size:15px;\"\u003e\n    \u003cbr /\u003e\n        This work is licensed under a\n        \u003ca rel\u003d\"license\" href\u003d\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"\u003eCreative Commons Attribution-NonCommercial-ShareAlike 4.0 International License\u003c/a\u003e.\n    \u003ca rel\u003d\"license\" href\u003d\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"\u003e\n        \u003cimg alt\u003d\"Creative Commons License\" style\u003d\"border-width:0;vertical-align:middle;float:right\" src\u003d\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /\u003e\n    \u003c/a\u003e\n\u003c/p\u003e\n\"\"\")\n",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ccenter\u003e\n    \u003ch1\u003eProgramación Distribuida sobre Grandes Volúmenes de Datos\u003c/h1\u003e\n\u003c/center\u003e\n\n\u003cbr\u003e\n\n\u003ch3 style\u003d\"text-align:center;\"\u003e\n    \u003ca href\u003d\"http://www.famaf.unc.edu.ar\"\u003e\n    Facultad de Matemática Astronomía Física y Computación\n    \u003c/a\u003e\n\u003cbr/\u003e\n    \u003ca href\u003d\"http://www.unc.edu.ar\"\u003e\n    Universidad Nacional de Córdoba\n    \u003c/a\u003e\n\u003cbr/\u003e\n    \u003ccenter\u003e\n    \u003ca href\u003d\"http://www.famaf.unc.edu.ar\"\u003e\n    \u003cimg src\u003d\"https://cs.famaf.unc.edu.ar/~damian/bigdata/curso/posgrado_optativa/lectivo/presentaciones/comun/logo%20UNC%20FAMAF%202016.svg\" alt\u003d\"Drawing\" style\u003d\"width:50%;\"/\u003e\n    \u003c/a\u003e\n    \u003c/center\u003e\n\u003c/h3\u003e\n\n\u003ch4 style\u003d\"text-align:center;\"\u003e Damián Barsotti  \u003c/h4\u003e\n\n\u003cp style\u003d\"font-size:15px;\"\u003e\n    \u003cbr /\u003e\n        This work is licensed under a\n        \u003ca rel\u003d\"license\" href\u003d\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"\u003eCreative Commons Attribution-NonCommercial-ShareAlike 4.0 International License\u003c/a\u003e.\n    \u003ca rel\u003d\"license\" href\u003d\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"\u003e\n        \u003cimg alt\u003d\"Creative Commons License\" style\u003d\"border-width:0;vertical-align:middle;float:right\" src\u003d\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /\u003e\n    \u003c/a\u003e\n\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913753_-166697773",
      "id": "20160719-195708_121333589",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#Resilient Distributed Dataset (RDD)\n",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch1\u003eResilient Distributed Dataset (RDD)\u003c/h1\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913755_-165928275",
      "id": "20160713-164104_891230593",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## 3.- Creación\n\nDos maneras:\n1. Cargando datos externos\n1. Paralelizando un contenedor\n    - método `paralelize`\n",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch2\u003e3.- Creación\u003c/h2\u003e\n\u003cp\u003eDos maneras:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eCargando datos externos\u003c/li\u003e\n\u003cli\u003eParalelizando un contenedor\u003cul\u003e\n\u003cli\u003emétodo \u003ccode\u003eparalelize\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913756_-167852019",
      "id": "20160713-164122_1281043853",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val lines \u003d sc.textFile(\"README.md\")",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/scala",
        "results": {},
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1505335913757_-168236768",
      "id": "20160713-171236_6569646",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val lines \u003d sc.parallelize(List(\"Hola che.\", \"que tal\"))",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/scala",
        "results": {},
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1505335913758_-167082522",
      "id": "20160713-171137_1733510384",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nSpark divide el dataset en múltiples **particiones** que pueden ser operadas en distintos nodos del cluster:",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eSpark divide el dataset en múltiples \u003cstrong\u003eparticiones\u003c/strong\u003e que pueden ser operadas en distintos nodos del cluster:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913760_-181702980",
      "id": "20160713-170635_1564475007",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val data \u003d 1 to 50\nval distData \u003d sc.parallelize(data,10) // 10 indica la cantidad de particiones, probar tambien sin.\ndistData.partitions.size",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "lineNumbers": true,
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "results": {},
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1505335913761_-182087729",
      "id": "20160715-123052_1819777592",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## ~.- Operaciones sobre RDD\u0027s\n\nDos clases de operaciones:\n* Transformaciones\n* Acciones",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch2\u003e~.- Operaciones sobre RDD\u0027s\u003c/h2\u003e\n\u003cp\u003eDos clases de operaciones:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTransformaciones\u003c/li\u003e\n\u003cli\u003eAcciones\u003c/li\u003e\n\u003c/ul\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913762_-180933482",
      "id": "20160713-171507_931528469",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Transformaciones\n\n* Devuelven un nuevo RDD transformando el original\n* Son lazy (se acumulan y se ejecutan cuando se necesite un resultado)\n\n\nVeamos el siguiente ejemplo:\n",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003eTransformaciones\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eDevuelven un nuevo RDD transformando el original\u003c/li\u003e\n\u003cli\u003eSon lazy (se acumulan y se ejecutan cuando se necesite un resultado)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eVeamos el siguiente ejemplo:\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913763_-181318231",
      "id": "20160713-171630_1976079115",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val inputRDD \u003d sc.textFile(\"./doc/log.txt\") // RDD. El archivo log.txt está en el aula virtual.\nval errorRDD \u003d inputRDD.filter(line \u003d\u003e line.contains(\"ERROR\")) // se crea un nuevo RDD",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "results": {},
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1505335913764_-183241975",
      "id": "20160713-171804_626161146",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md \u0026nbsp;\nNotar que `filter` no muta el RDD `inputRDD` si no que crea uno nuevo (los RDD son inmutables).\nCon lo cual podríamos volver a utilizar inputRDD:",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 6.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003e\u0026nbsp;\n\u003cbr  /\u003eNotar que \u003ccode\u003efilter\u003c/code\u003e no muta el RDD \u003ccode\u003einputRDD\u003c/code\u003e si no que crea uno nuevo (los RDD son inmutables).\n\u003cbr  /\u003eCon lo cual podríamos volver a utilizar inputRDD:\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913765_-183626724",
      "id": "20160713-173758_874891123",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Programa",
      "text": "val inputRDD \u003d sc.textFile(\"./doc/log.txt\") // RDD\nval errorRDD \u003d inputRDD.filter(line \u003d\u003e line.contains(\"ERROR\")) // se crea un nuevo RDD\nval configRDD \u003d inputRDD.filter(line \u003d\u003e line.contains(\"config\")) // se crea un nuevo RDD\n\nval errOrConfRDD \u003d errorRDD.union(configRDD) \n//errOrConfRDD.toDebugString",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "lineNumbers": true,
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": true,
        "results": {},
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1505335913766_-182472478",
      "id": "20160713-174309_1524556660",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nComo se ve en la linea 5 las transformaciones pueden operar sobre uno o más RDD\u0027s.\nLa transformación `union` crea un nuevo RDD con la lineas que contienen tanto la palabra \"ERROR\" como \"config\"\n(una forma mejor sería filtrar las lineas con \"ERROR\" y \"config\" al mismo tiempo).\n",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eComo se ve en la linea 5 las transformaciones pueden operar sobre uno o más RDD\u0027s.\n\u003cbr  /\u003eLa transformación \u003ccode\u003eunion\u003c/code\u003e crea un nuevo RDD con la lineas que contienen tanto la palabra \u0026ldquo;ERROR\u0026rdquo; como \u0026ldquo;config\u0026rdquo;\n\u003cbr  /\u003e(una forma mejor sería filtrar las lineas con \u0026ldquo;ERROR\u0026rdquo; y \u0026ldquo;config\u0026rdquo; al mismo tiempo).\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913767_-182857226",
      "id": "20160713-174954_1060101920",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md \u0026nbsp;\n\nSpark hace un seguimiento de las dependencias entre RDD\u0027s llamadas **grafo de dependencias** (linage graph):",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 6.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003eSpark hace un seguimiento de las dependencias entre RDD\u0027s llamadas \u003cstrong\u003egrafo de dependencias\u003c/strong\u003e (linage graph):\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913768_-184780971",
      "id": "20160713-190711_1338428430",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Grafo de dependencias",
      "text": "print(s\"\"\"%html\n\u003cimg src\u003d\"$baseDir/log_linage.png\" alt\u003d\"Drawing\" style\u003d\"width: 70%;\"/\u003e\n\"\"\")",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 6.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cimg src\u003d\"https://cs.famaf.unc.edu.ar/~damian/bigdata/curso/posgrado_optativa/lectivo/presentaciones/04_rdd_notebook/log_linage.png\" alt\u003d\"Drawing\" style\u003d\"width: 70%;\"/\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913770_-184011473",
      "id": "20160713-175804_440530333",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Algunas Transformaciones...rdd\u003d{1,2,3,3}",
      "text": "print(s\"\"\"\n%table\nTransformación\\tDescripción\\t Ejemplo \\t Resultado\n%html \u003cb\u003emap\u003c/b\u003e(func)\\t Devuelve un nuevo rdd transformando cada elemento con la función func. \\t rdd.map(x \u003d\u003e x+1) \\t {2,3,4,4}\n%html \u003cb\u003efilter\u003c/b\u003e(func)\\t Devuelve un nuevo RDD seleccionando los elementos con la función func. \\t rdd.filter(x \u003d\u003e x!\u003d1) \\t {2,3,3}\n%html \u003cb\u003eflatMap\u003c/b\u003e(func)\\t Similar a map pero cada elemento es mapeado a un Seq en vez de a un elemento y los concatena. \\t rdd.flatMap(x\u003d\u003ex.to(3)) \\t {1,2,3,2,3,3,3}\n%html \u003cb\u003edistinct\u003c/b\u003e() \\t Remueve duplicados.\\t rdd.distinct() \\t {1,2,3}\n%html \u003cb\u003esample\u003c/b\u003e(con_reemplazo,frac,[seed])\\t Toma una muestra del RDD.  \\t rdd.sample(false,0.5) \\t No determinista \n\\t Sin reemplazo: frac es probabilidad de elección de un elemento.\\t \\t\n\\t Con reemplazo: numero de veces esperado que un elemento es elegido (\u003e\u003d0).\\t \\t\n\"\"\")",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            }
          },
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            }
          },
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            }
          },
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            }
          },
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            }
          },
          {
            "graph": {
              "mode": "table",
              "height": 224.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "Transformación",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "Descripción",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "scatter": {
                "xAxis": {
                  "name": "Transformación",
                  "index": 0.0,
                  "aggr": "sum"
                },
                "yAxis": {
                  "name": "Descripción",
                  "index": 1.0,
                  "aggr": "sum"
                }
              }
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\n"
          },
          {
            "type": "TABLE",
            "data": "Transformación\tDescripción\t Ejemplo \t Resultado\n%html \u003cb\u003emap\u003c/b\u003e(func)\t Devuelve un nuevo rdd transformando cada elemento con la función func. \t rdd.map(x \u003d\u003e x+1) \t {2,3,4,4}\n%html \u003cb\u003efilter\u003c/b\u003e(func)\t Devuelve un nuevo RDD seleccionando los elementos con la función func. \t rdd.filter(x \u003d\u003e x!\u003d1) \t {2,3,3}\n%html \u003cb\u003eflatMap\u003c/b\u003e(func)\t Similar a map pero cada elemento es mapeado a un Seq en vez de a un elemento y los concatena. \t rdd.flatMap(x\u003d\u003ex.to(3)) \t {1,2,3,2,3,3,3}\n%html \u003cb\u003edistinct\u003c/b\u003e() \t Remueve duplicados.\t rdd.distinct() \t {1,2,3}\n%html \u003cb\u003esample\u003c/b\u003e(con_reemplazo,frac,[seed])\t Toma una muestra del RDD.  \t rdd.sample(false,0.5) \t No determinista \n\t Sin reemplazo: frac es probabilidad de elección de un elemento.\t \t\n\t Con reemplazo: numero de veces esperado que un elemento es elegido (\u003e\u003d0).\t \t\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913771_-184396222",
      "id": "20170830-121826_376153165",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Transformaciones 2 RDD\u0027s...rdd\u003d{1,2,3},other\u003d{3,4,5}",
      "text": "print(s\"\"\"\n%table\nTransformación\\tdescripción\\t Ejemplo \\t Resultado\n%html \u003cb\u003eunion\u003c/b\u003e(otroRDD)\\t Devuelve la unión del RDD y el argumento con repeticiones. \\t rdd.union(other) \\t {1,2,3,3,4,5}\n%html \u003cb\u003eintersection\u003c/b\u003e(otroRDD)\\t Devuelve los elementos que estan en el RDD y el argumento. \\t rdd.intersection(other) \\t {3}\n%html \u003cb\u003esubtract\u003c/b\u003e(otroRDD)\\t Devuelve la resta del RDD y el argumento. \\t rdd.substract(other) \\t {1,2}\n%html \u003cb\u003ecartesian\u003c/b\u003e(otroRDD)\\t Devuelve el producto cartesiano. \\t rdd.cartesian(other) \\t {(1,3),(1,4),(1,5),(2,3),...,(3,5)}\n\"\"\")\n\n",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "editorSetting": {},
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            }
          },
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            }
          },
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            }
          },
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            }
          },
          {
            "graph": {
              "mode": "table",
              "height": 184.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "Transformación",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "descripción",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "scatter": {
                "yAxis": {
                  "name": "descripción",
                  "index": 1.0,
                  "aggr": "sum"
                }
              }
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\n"
          },
          {
            "type": "TABLE",
            "data": "Transformación\tdescripción\t Ejemplo \t Resultado\n%html \u003cb\u003eunion\u003c/b\u003e(otroRDD)\t Devuelve la unión del RDD y el argumento con repeticiones. \t rdd.union(other) \t {1,2,3,3,4,5}\n%html \u003cb\u003eintersection\u003c/b\u003e(otroRDD)\t Devuelve los elementos que estan en el RDD y el argumento. \t rdd.intersection(other) \t {3}\n%html \u003cb\u003esubtract\u003c/b\u003e(otroRDD)\t Devuelve la resta del RDD y el argumento. \t rdd.substract(other) \t {1,2}\n%html \u003cb\u003ecartesian\u003c/b\u003e(otroRDD)\t Devuelve el producto cartesiano. \t rdd.cartesian(other) \t {(1,3),(1,4),(1,5),(2,3),...,(3,5)}\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913772_-186319967",
      "id": "20160718-203427_949028664",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Notas:",
      "text": "%md\n* Las transformaciones no son sobre conjuntos ya que los RDD\u0027s tienen duplicados (son *multiconjuntos*).\n* `intersection` remueve duplicados en el resultado.\n* `distinct`, `intersection`, `substract` y `cartesian` son poco eficientes ya que requiere transferencia de datos.\n\nPara más información y transformaciones ver:\n* [Spark RDD Api Guide](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.rdd.RDD).\n",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cul\u003e\n\u003cli\u003eLas transformaciones no son sobre conjuntos ya que los RDD\u0027s tienen duplicados (son \u003cem\u003emulticonjuntos\u003c/em\u003e).\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eintersection\u003c/code\u003e remueve duplicados en el resultado.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edistinct\u003c/code\u003e, \u003ccode\u003eintersection\u003c/code\u003e, \u003ccode\u003esubstract\u003c/code\u003e y \u003ccode\u003ecartesian\u003c/code\u003e son poco eficientes ya que requiere transferencia de datos.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ePara más información y transformaciones ver:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href\u003d\"http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.rdd.RDD\"\u003eSpark RDD Api Guide\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913773_-186704715",
      "id": "20160718-215211_1535950499",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Acciones\n\n* Devuelven un resultado final al *driver*, o\n* escriben datos en almacenamiento externo.\n* Fuerzan la evaluación de las transformaciones.\n\nSiguiendo el ejemplo anterior, contemos la cantidad de lineas (con la acción `count`) y mostremos los primeros 10 resultados (acción `take`): ",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003eAcciones\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eDevuelven un resultado final al \u003cem\u003edriver\u003c/em\u003e, o\u003c/li\u003e\n\u003cli\u003eescriben datos en almacenamiento externo.\u003c/li\u003e\n\u003cli\u003eFuerzan la evaluación de las transformaciones.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSiguiendo el ejemplo anterior, contemos la cantidad de lineas (con la acción \u003ccode\u003ecount\u003c/code\u003e) y mostremos los primeros 10 resultados (acción \u003ccode\u003etake\u003c/code\u003e):\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913774_-185550469",
      "id": "20160713-194134_1567089309",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "programa",
      "text": "val inputRDD \u003d sc.textFile(\"./doc/log.txt\") // En aula virtual \"Archivos de prueba\" \nval errorRDD \u003d inputRDD.filter(line \u003d\u003e line.contains(\"ERROR\")) // se crea un nuevo RDD\nval configRDD \u003d inputRDD.filter(line \u003d\u003e line.contains(\"config\")) // se crea un nuevo RDD\nval errOrConfRDD \u003d errorRDD.union(configRDD) \n\n//Acciones:\nprintln(\"El archivo tiene \"+ errOrConfRDD.count + \"\"\" lineas que contienen \"error\" o \"config\".\"\"\")\nprintln(\"Las primeras 10 son:\")\nerrOrConfRDD.take(10).foreach(println) //",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "lineNumbers": true,
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 7.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": true,
        "results": {},
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1505335913775_-185935218",
      "id": "20160713-200021_1787135967",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Spark UI",
      "text": "{\nval uiHost \u003d sc.getConf.getOption(\"spark.driver.host\").getOrElse(\"localhost\")\nval uiPort \u003d sc.getConf.getOption(\"spark.ui.port\").getOrElse(\"4040\")\nprint(s\"\"\"\n%html\nVer resultado en Spark UI\n\u003ca href\u003d\"http://$uiHost:$uiPort\"\u003ehttp://$uiHost(host):$uiPort(port)\u003c/a\u003e.\n\u003cbr\u003e\n(ejecutar antes esta celda para detectar link)\n\u003cbr\u003e\nNota: Total Tasks \u003d numero de particiones\n\u003cbr\u003e\nVer tambien Dag Visualization\n\"\"\")\n}",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 5.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\n"
          },
          {
            "type": "HTML",
            "data": "Ver resultado en Spark UI\n\u003ca href\u003d\"http://200.16.17.38:4040\"\u003ehttp://200.16.17.38(host):4040(port)\u003c/a\u003e.\n\u003cbr\u003e\n(ejecutar antes esta celda para detectar link)\n\u003cbr\u003e\nNota: Total Tasks \u003d numero de particiones\n\u003cbr\u003e\nVer tambien Dag Visualization\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913776_-175546997",
      "id": "20160715-152919_1733799639",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md \u0026nbsp;\n\n* Para devolver el contenido de todo un RDD se puede utilizar la acción `collect`, aunque no es recomendado para datasets muy grandes. En estos casos es conveniente guardar el resultado en algún file system (lo veremos más adelante).\n    -  Ver ejemplo anterior cuantas tareas si uso collect en vez de take.\n    -  Que tiene que ver con la evaluación lazy?\n* Se puede ver el grafo de dependencias desde el shell con `rdd.toDebugString`.",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003ePara devolver el contenido de todo un RDD se puede utilizar la acción \u003ccode\u003ecollect\u003c/code\u003e, aunque no es recomendado para datasets muy grandes. En estos casos es conveniente guardar el resultado en algún file system (lo veremos más adelante).\n    \u003cul\u003e\n      \u003cli\u003eVer ejemplo anterior cuantas tareas si uso collect en vez de take.\u003c/li\u003e\n      \u003cli\u003eQue tiene que ver con la evaluación lazy?\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003eSe puede ver el grafo de dependencias desde el shell con \u003ccode\u003erdd.toDebugString\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913777_-175931746",
      "id": "20160714-065200_1376556822",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Reduce",
      "text": "%md\nLa acción `reduce()` toma un operador asociativo y conmutativo. \nEjemplo:\n```scala\nval minimo \u003d rdd.reduce((x,y)\u003d\u003e x min y)\n```\n",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 6.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eLa acción \u003ccode\u003ereduce()\u003c/code\u003e toma un operador asociativo y conmutativo.\n\u003cbr  /\u003eEjemplo:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"scala\"\u003eval minimo \u003d rdd.reduce((x,y)\u003d\u0026gt; x min y)\n\u003c/code\u003e\u003c/pre\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913778_-174777500",
      "id": "20160719-130149_1926671124",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "fold",
      "text": "%md\nLa acción `fold()` toma un operador asociativo, conmutativo y su neutro (monoide conmutativo). \nEjemplo:\n```scala\nval prod \u003d rdd.fold(1)(_ * _)\n```\nVentaja con `reduce`: \n* si el RDD almacena objetos mutables se puede minimizar la creación devolviendo el primer parámetro mutado.",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 6.0,
        "editorHide": true,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eLa acción \u003ccode\u003efold()\u003c/code\u003e toma un operador asociativo, conmutativo y su neutro (monoide conmutativo).\n\u003cbr  /\u003eEjemplo:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"scala\"\u003eval prod \u003d rdd.fold(1)(_ * _)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eVentaja con \u003ccode\u003ereduce\u003c/code\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003esi el RDD almacena objetos mutables se puede minimizar la creación devolviendo el primer parámetro mutado.\u003c/li\u003e\n\u003c/ul\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913779_-175162248",
      "id": "20160719-130746_1301430051",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "agregate",
      "text": "%md\n```\nagregate(\u003cneutro\u003e)(\u003cseqOp\u003e,\u003ccombOp\u003e)\n```\n* Hace un `fold` pero puede devolver un tipo distinto a los elementos del RDD.\n* `\u003cseqOP\u003e` operador que acumula los resultados dentro de una partición (nodo). Puede devolver un tipo distinto.\n* `\u003ccombOp\u003e` operador asociativo que combina los resultados de los acumuladores de cada partición.\n* `\u003cneutro\u003e` de `combOp`. \n",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cpre\u003e\u003ccode\u003eagregate(\u0026lt;neutro\u0026gt;)(\u0026lt;seqOp\u0026gt;,\u0026lt;combOp\u0026gt;)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eHace un \u003ccode\u003efold\u003c/code\u003e pero puede devolver un tipo distinto a los elementos del RDD.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;seqOP\u0026gt;\u003c/code\u003e operador que acumula los resultados dentro de una partición (nodo). Puede devolver un tipo distinto.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;combOp\u0026gt;\u003c/code\u003e operador asociativo que combina los resultados de los acumuladores de cada partición.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;neutro\u0026gt;\u003c/code\u003e de \u003ccode\u003ecombOp\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913781_-177470742",
      "id": "20160719-135625_75076484",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Programa (Hay Cero)",
      "text": "val randoms \u003d Seq.fill(10)(scala.util.Random.nextInt(10))\nval rdd \u003d sc.parallelize(randoms)\nval hay0 : Boolean \u003d rdd.aggregate(false)(\n                                  (acc,value) \u003d\u003e acc || value \u003d\u003d 0, \n                                  (acc1,acc2) \u003d\u003e acc1 || acc2)",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "lineNumbers": true,
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": {},
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1505335913782_-176316495",
      "id": "20160719-141504_1398510666",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Programa (Promedio)",
      "text": "val input \u003d sc.parallelize(1 to 30)\nval result \u003d input.aggregate((0, 0))(\n                             (acc, value) \u003d\u003e (acc._1 + value, acc._2 + 1),\n                             (acc1, acc2) \u003d\u003e \n                                  (acc1._1 + acc2._1, acc1._2 + acc2._2))\nval avg \u003d result._1 / result._2.toDouble",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "lineNumbers": true,
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": {},
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1505335913783_-176701244",
      "id": "20160719-143830_796010885",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Más Acciones...rdd\u003d{1,2,3,3}",
      "text": "print(s\"\"\"\n%table\nAcción\\tDescripción\\t Ejemplo \\t Resultado\n%html \u003cb\u003ecollect\u003c/b\u003e()\\t Devuelve un array con todos los elementos del RDD. \\t rdd.collect(other) \\t Array(1,2,3,3)\n%html \u003cb\u003etake\u003c/b\u003e(n)\\t Devuelve un array con n elementos. \\t rdd.take(2) \\t Array(1,3)\n%html \u003cb\u003etop\u003c/b\u003e(n)\\t Devuelve un array con los n mayores elementos. \\t rdd.top(2) \\t Array(3,3)\n%html \u003cb\u003etakeOrdered\u003c/b\u003e(n)\\t Devuelve un array con los n menores elementos. \\t rdd.takeOrdered(2) \\t Array(1,2)\n%html \u003cb\u003etakeSample\u003c/b\u003e(con_reemplazo,n,[seed])\\t Devuelve n elementos al azar, con o sin reeemplazo. \\t rdd.takeSample(false,2) \\t No determinista\n%html \u003cb\u003ecount\u003c/b\u003e()\\t Cantidad de elementos. \\t rdd.count() \\t 4\n%html \u003cb\u003ecountByValue\u003c/b\u003e()\\t Map con la cantidad de veces que aparece cada elemento. \\t rdd.countByValue() \\t Map(1-\u003e1, 2-\u003e1, 3-\u003e2)\n%html \u003cb\u003emean\u003c/b\u003e()\\t Computa el promedio. \\t rdd.mean() \\t 3.8\n%html \u003cb\u003evariance\u003c/b\u003e()\\t Computa la varianza. \\t rdd.variance() \\t 8.959999999999999\n%html \u003cb\u003eforeach\u003c/b\u003e(func)\\t Aplica función sin devolver nada. \\t rdd.foreach(print) \\t Nada (pero imprime \"1233\")\n%html \u003cb\u003esaveAsTextFile\u003c/b\u003e(outputFile)\\t Guarda el resultado en file system. \\t rdd.saveAsTextFile(\"archivo\") \\t Nada\n\"\"\")\n",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "editorSetting": {},
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            }
          },
          {
            "graph": {
              "mode": "table",
              "height": 368.0,
              "optionOpen": false
            }
          },
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            }
          },
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            }
          },
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            }
          },
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            }
          },
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            }
          },
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            }
          },
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            }
          },
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            }
          },
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            }
          },
          {
            "graph": {
              "mode": "table",
              "height": 383.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "Acción",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "Descripción",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "scatter": {
                "xAxis": {
                  "name": "Acción",
                  "index": 0.0,
                  "aggr": "sum"
                },
                "yAxis": {
                  "name": "Descripción",
                  "index": 1.0,
                  "aggr": "sum"
                }
              }
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\n"
          },
          {
            "type": "TABLE",
            "data": "Acción\tDescripción\t Ejemplo \t Resultado\n%html \u003cb\u003ecollect\u003c/b\u003e()\t Devuelve un array con todos los elementos del RDD. \t rdd.collect(other) \t Array(1,2,3,3)\n%html \u003cb\u003etake\u003c/b\u003e(n)\t Devuelve un array con n elementos. \t rdd.take(2) \t Array(1,3)\n%html \u003cb\u003etop\u003c/b\u003e(n)\t Devuelve un array con los n mayores elementos. \t rdd.top(2) \t Array(3,3)\n%html \u003cb\u003etakeOrdered\u003c/b\u003e(n)\t Devuelve un array con los n menores elementos. \t rdd.takeOrdered(2) \t Array(1,2)\n%html \u003cb\u003etakeSample\u003c/b\u003e(con_reemplazo,n,[seed])\t Devuelve n elementos al azar, con o sin reeemplazo. \t rdd.takeSample(false,2) \t No determinista\n%html \u003cb\u003ecount\u003c/b\u003e()\t Cantidad de elementos. \t rdd.count() \t 4\n%html \u003cb\u003ecountByValue\u003c/b\u003e()\t Map con la cantidad de veces que aparece cada elemento. \t rdd.countByValue() \t Map(1-\u003e1, 2-\u003e1, 3-\u003e2)\n%html \u003cb\u003emean\u003c/b\u003e()\t Computa el promedio. \t rdd.mean() \t 3.8\n%html \u003cb\u003evariance\u003c/b\u003e()\t Computa la varianza. \t rdd.variance() \t 8.959999999999999\n%html \u003cb\u003eforeach\u003c/b\u003e(func)\t Aplica función sin devolver nada. \t rdd.foreach(print) \t Nada (pero imprime \"1233\")\n%html \u003cb\u003esaveAsTextFile\u003c/b\u003e(outputFile)\t Guarda el resultado en file system. \t rdd.saveAsTextFile(\"archivo\") \t Nada\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913784_-178624989",
      "id": "20160719-144149_776727846",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Nota:",
      "text": "%md\n* `take`, `top` y `takeOrdered` pueden tener un parámetro extra que defina el orden.\n* `saveAsTextFile` guarda el resultado en un directorio con el nombre `outputFile` (un archivo por partición).\n\nPara más información y acciones ver:\n* [Spark RDD Api Guide](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.rdd.RDD).\n* Las acciones como `mean` y `variance` que operan sobre tipo `Double` aparecen en [Spark RDD Double Api Guide](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.rdd.DoubleRDDFunctions).\n",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etake\u003c/code\u003e, \u003ccode\u003etop\u003c/code\u003e y \u003ccode\u003etakeOrdered\u003c/code\u003e pueden tener un parámetro extra que defina el orden.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esaveAsTextFile\u003c/code\u003e guarda el resultado en un directorio con el nombre \u003ccode\u003eoutputFile\u003c/code\u003e (un archivo por partición).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ePara más información y acciones ver:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href\u003d\"http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.rdd.RDD\"\u003eSpark RDD Api Guide\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eLas acciones como \u003ccode\u003emean\u003c/code\u003e y \u003ccode\u003evariance\u003c/code\u003e que operan sobre tipo \u003ccode\u003eDouble\u003c/code\u003e aparecen en \u003ca href\u003d\"http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.rdd.DoubleRDDFunctions\"\u003eSpark RDD Double Api Guide\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913785_-179009737",
      "id": "20160719-185841_1789126413",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## ~.- Evaluación Lazy\n\nEn Spark todas las **transformaciones** son evaluadas de forma lazy:\n* son acumuladas como *grafo de dependencias*\n* se ejecutan al momento de realizar una acción según sus dependencias.\n\nEsto permite:\n* recalcular las dependencias si hay algún fallo (**resilencia**)\n* hacer **optimizaciones**\n    - se hace un *pipeling* de transformaciones sin guardar resultados intermedios \n    - se computa solo lo que hace falta (tiene mucho sentido en Big Data)\n\nTambién la carga de datos es lazy (ver ejemplos).",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch2\u003e~.- Evaluación Lazy\u003c/h2\u003e\n\u003cp\u003eEn Spark todas las \u003cstrong\u003etransformaciones\u003c/strong\u003e son evaluadas de forma lazy:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eson acumuladas como \u003cem\u003egrafo de dependencias\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003ese ejecutan al momento de realizar una acción según sus dependencias.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEsto permite:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003erecalcular las dependencias si hay algún fallo (\u003cstrong\u003eresilencia\u003c/strong\u003e)\u003c/li\u003e\n\u003cli\u003ehacer \u003cstrong\u003eoptimizaciones\u003c/strong\u003e\u003cul\u003e\n\u003cli\u003ese hace un \u003cem\u003epipeling\u003c/em\u003e de transformaciones sin guardar resultados intermedios\u003c/li\u003e\n\u003cli\u003ese computa solo lo que hace falta (tiene mucho sentido en Big Data)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTambién la carga de datos es lazy (ver ejemplos).\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913786_-177855491",
      "id": "20160714-070728_716418389",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Computa solo lo necesario:",
      "text": "val distFile \u003d sc.textFile(\"README.md\")\nval wordsFile \u003d distFile.map(l \u003d\u003e l.split(\" \"))\nwordsFile.first()(0) // se lee y aplica map solo a la primer linea",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "lineNumbers": true,
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": {},
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1505335913787_-178240240",
      "id": "20160714-071909_1557855172",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Lee solo lo necesario:",
      "text": "val distFile \u003d sc.textFile(\"README.md\")\nval zeppLines \u003d distFile.filter(l \u003d\u003e l.contains(\"Zeppelin\"))\nzeppLines.first // lee hasta la primer linea que tiene la palabra",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "lineNumbers": true,
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": true,
        "results": {},
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1505335913788_-180163984",
      "id": "20160714-072744_1911966320",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Reduce la cantidad de pasadas:",
      "text": "val distFile \u003d sc.textFile(\"README.md\")\n\nval cleanFile \u003d distFile.map(l \u003d\u003e l.trim)\nval wordsFile \u003d cleanFile.map(l \u003d\u003e l.split(\" \"))\n//es lo mismo que\nval wordsFile \u003d distFile.map(l \u003d\u003e l.trim.split(\" \"))",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "lineNumbers": true,
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": {},
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1505335913788_-180163984",
      "id": "20160714-073345_1463486707",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## ~.- Persistencia\n\nSpark **recomputa** el grafo de dependencias cuando se llama una acción:",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch2\u003e~.- Persistencia\u003c/h2\u003e\n\u003cp\u003eSpark \u003cstrong\u003erecomputa\u003c/strong\u003e el grafo de dependencias cuando se llama una acción:\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913789_-180548733",
      "id": "20160715-115826_18047907",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val input \u003d sc.parallelize(1 to 30)\nval result \u003d input.map(x \u003d\u003e x*x)\nprintln(result.count()) // computa el map\nprintln(result.collect().mkString(\",\")) // recomputa el map",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "lineNumbers": true,
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {},
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1505335913790_-179394486",
      "id": "20160714-074122_809060797",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val uiPort \u003d sc.getConf.getOption(\"spark.ui.port\").getOrElse(\"4040\")\nprint(s\"\"\"\n%html\n(ver resultado en Spark UI\n\u003ca href\u003d\"http://$uiHost:$uiPort\"\u003ehttp://$uiHost(host):$uiPort(port)\u003c/a\u003e)\n\u003cbr\u003e\n\u003cbr\u003e\nPara evitarlo Spark puede cachear los datos:\n\"\"\")\n",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "(ver resultado en Spark UI\n\u003ca href\u003d\"http://192.168.1.201:4040\"\u003ehttp://192.168.1.201(host):4040(port)\u003c/a\u003e)\n\u003cbr\u003e\n\u003cbr\u003e\nPara evitarlo Spark puede cachear los datos:\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913791_-179779235",
      "id": "20160715-120820_147737126",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val input \u003d sc.parallelize(1 to 100)\nval result \u003d input.map(x \u003d\u003e x*x).setName(\"cuadrados2\").cache()\nprintln(result.mean()) // computa el map cacheando\nprintln(result.collect().mkString(\",\")) // no recomputa el map\n//result.unpersist()",
      "user": "anonymous",
      "dateUpdated": "Sep 13, 2017 5:56:39 PM",
      "config": {
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/scala",
        "results": {},
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\ninput: org.apache.spark.rdd.RDD[Int] \u003d ParallelCollectionRDD[2] at parallelize at \u003cconsole\u003e:27\n\nresult: org.apache.spark.rdd.RDD[Int] \u003d cuadrados2 MapPartitionsRDD[3] at map at \u003cconsole\u003e:29\n3383.5\n1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256,289,324,361,400,441,484,529,576,625,676,729,784,841,900,961,1024,1089,1156,1225,1296,1369,1444,1521,1600,1681,1764,1849,1936,2025,2116,2209,2304,2401,2500,2601,2704,2809,2916,3025,3136,3249,3364,3481,3600,3721,3844,3969,4096,4225,4356,4489,4624,4761,4900,5041,5184,5329,5476,5625,5776,5929,6084,6241,6400,6561,6724,6889,7056,7225,7396,7569,7744,7921,8100,8281,8464,8649,8836,9025,9216,9409,9604,9801,10000\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913791_-179779235",
      "id": "20160715-121014_1297014641",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "dateStarted": "Sep 13, 2017 5:56:40 PM",
      "dateFinished": "Sep 13, 2017 5:56:40 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "{\nval uiHost \u003d sc.getConf.getOption(\"spark.driver.host\").getOrElse(\"localhost\")\nval uiPort \u003d sc.getConf.getOption(\"spark.ui.port\").getOrElse(\"4040\")\nprint(s\"\"\"\n%html\nVer resultado en Spark UI\n\u003ca href\u003d\"http://$uiHost:$uiPort/storage\"\u003ehttp://$uiHost(host):$uiPort(port)/storage\u003c/a\u003e\n\u003cbr\u003e\nObservar tambien green dots en Dag Visualization.\n\"\"\")\n}",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 6.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\n"
          },
          {
            "type": "HTML",
            "data": "Ver resultado en Spark UI\n\u003ca href\u003d\"http://192.168.1.200:4040/storage\"\u003ehttp://192.168.1.200(host):4040(port)/storage\u003c/a\u003e\n\u003cbr\u003e\nObservar tambien green dots en Dag Visualization.\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913792_-194014945",
      "id": "20160715-175222_773072638",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "características:",
      "text": "%md\n* Cada nodo almacena su partición de datos.\n* Al ejecutar nuevas acciones reusa el resultado (más velocidad).\n* Tolerante a fallas: \n    - si el caché se pierde se recomputa reejecutando las transformaciones\n* Es lazy (se ejecuta con la acción)\n* Métodos:\n    - `cache()` cachea en memoria (JVM heap)\n    - `persist(\u003cnivel de persistencia\u003e)` cachea según parámetro (si es vacio por defecto en memoria)\n    - `unpersist()` borra caché.",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cul\u003e\n\u003cli\u003eCada nodo almacena su partición de datos.\u003c/li\u003e\n\u003cli\u003eAl ejecutar nuevas acciones reusa el resultado (más velocidad).\u003c/li\u003e\n\u003cli\u003eTolerante a fallas:\u003cul\u003e\n\u003cli\u003esi el caché se pierde se recomputa reejecutando las transformaciones\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eEs lazy (se ejecuta con la acción)\u003c/li\u003e\n\u003cli\u003eMétodos:\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecache()\u003c/code\u003e cachea en memoria (JVM heap)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epersist(\u0026lt;nivel de persistencia\u0026gt;)\u003c/code\u003e cachea según parámetro (si es vacio por defecto en memoria)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eunpersist()\u003c/code\u003e borra caché.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913793_-194399693",
      "id": "20160715-121506_391366546",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Niveles de persistencia",
      "text": "print(s\"\"\"\n%table\nNivel de almacenamienro \\t Significado\nMEMORY_ONLY \\t Guarda RDD como objetos Java no serializados. Si el RDD no cabe en memoria algunas particiones no serán cacheadas y se recomputarán cuando se necesitan. Es el nivel por defecto.\nMEMORY_AND_DISK \\t Guarda RDD como objetos Java no serializados. Si el RDD no cabe en memoria guarda las particiones que no caben en disco y las lee cuando se necesiten.\nMEMORY_ONLY_SER \\t Guarda RDD como objetos Java serializados (un array de bytes por partición). Es generalmente más eficiente en espacio pero menos eficiente en uso de procesador.\nMEMORY_AND_DISK_SER \\t Similar a MEMORY_ONLY_SER, pero guarda en disco las particiones que no caben en memoria.\nDISK_ONLY \\t Guarda las particiones en disco.\nMEMORY_ONLY_2, MEMORY_AND_DISK_2, etc.\\t Igual que las anteriores pero replica cada partición en dos nodos.\nOFF_HEAP (experimental) \\t Guarda los RDD serializados en Alluxio. Parecido a MEMORY_ONLY_SER pero reduce el tiempor de garbage collection y reduce el tamaño de los ejecutores. Bueno para ambientes con mucha memoria y múltiples aplicaciones concurrentes. En caso de fallas, Spark no necesita reconstruir las particiones (Alluxio tiene su propio mecanismo de tolerancia a fallas).\n\"\"\")\n",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 366.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "Nivel de almacenamienro ",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": " Significado",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "scatter": {
                "xAxis": {
                  "name": "Nivel de almacenamienro ",
                  "index": 0.0,
                  "aggr": "sum"
                },
                "yAxis": {
                  "name": " Significado",
                  "index": 1.0,
                  "aggr": "sum"
                }
              }
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "Nivel de almacenamienro \t Significado\nMEMORY_ONLY \t Guarda RDD como objetos Java no serializados. Si el RDD no cabe en memoria algunas particiones no serán cacheadas y se recomputarán cuando se necesitan. Es el nivel por defecto.\nMEMORY_AND_DISK \t Guarda RDD como objetos Java no serializados. Si el RDD no cabe en memoria guarda las particiones que no caben en disco y las lee cuando se necesiten.\nMEMORY_ONLY_SER \t Guarda RDD como objetos Java serializados (un array de bytes por partición). Es generalmente más eficiente en espacio pero menos eficiente en uso de procesador.\nMEMORY_AND_DISK_SER \t Similar a MEMORY_ONLY_SER, pero guarda en disco las particiones que no caben en memoria.\nDISK_ONLY \t Guarda las particiones en disco.\nMEMORY_ONLY_2, MEMORY_AND_DISK_2, etc.\t Igual que las anteriores pero replica cada partición en dos nodos.\nOFF_HEAP (experimental) \t Guarda los RDD serializados en Alluxio. Parecido a MEMORY_ONLY_SER pero reduce el tiempor de garbage collection y reduce el tamaño de los ejecutores. Bueno para ambientes con mucha memoria y múltiples aplicaciones concurrentes. En caso de fallas, Spark no necesita reconstruir las particiones (Alluxio tiene su propio mecanismo de tolerancia a fallas).\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913794_-193245447",
      "id": "20160718-175802_323407423",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Notas:",
      "text": "%md\n* [Alluxio](http://www.alluxio.org/docs/master/en/) es una tecnología de almacenamiento compartido en memoria. Anteriormente se llamó Tachyon. Para más información ver [Alluxio Docs: Running Spark on Alluxio](http://www.alluxio.org/docs/master/en/Running-Spark-on-Alluxio.html).\n* En Python no se puede elegir el nivel de almacenamiento (siempre serializa en memoria).\n* Ver también [Spark Docs: Which Storage Level to Choose?](http://spark.apache.org/docs/latest/programming-guide.html#which-storage-level-to-choose).\n",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cul\u003e\n\u003cli\u003e\u003ca href\u003d\"http://www.alluxio.org/docs/master/en/\"\u003eAlluxio\u003c/a\u003e es una tecnología de almacenamiento compartido en memoria. Anteriormente se llamó Tachyon. Para más información ver \u003ca href\u003d\"http://www.alluxio.org/docs/master/en/Running-Spark-on-Alluxio.html\"\u003eAlluxio Docs: Running Spark on Alluxio\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eEn Python no se puede elegir el nivel de almacenamiento (siempre serializa en memoria).\u003c/li\u003e\n\u003cli\u003eVer también \u003ca href\u003d\"http://spark.apache.org/docs/latest/programming-guide.html#which-storage-level-to-choose\"\u003eSpark Docs: Which Storage Level to Choose?\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913794_-193245447",
      "id": "20160718-183042_280042764",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## ~.- Programas, Jobs, Stages y Tasks \n\nDurante la ejecución de un programa se hace un plan de ejecución según el **grafo de dependencias**:\n\n* Cada **acción** dispara un **job** para obtener el resultado.\n* Cada job es dividido en **stages**, una para cada RDD. \n* Cada stage consiste de multiples **tasks**, una para cada **partición** del RDD.\n",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch2\u003e~.- Programas, Jobs, Stages y Tasks\u003c/h2\u003e\n\u003cp\u003eDurante la ejecución de un programa se hace un plan de ejecución según el \u003cstrong\u003egrafo de dependencias\u003c/strong\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCada \u003cstrong\u003eacción\u003c/strong\u003e dispara un \u003cstrong\u003ejob\u003c/strong\u003e para obtener el resultado.\u003c/li\u003e\n\u003cli\u003eCada job es dividido en \u003cstrong\u003estages\u003c/strong\u003e, una para cada RDD.\u003c/li\u003e\n\u003cli\u003eCada stage consiste de multiples \u003cstrong\u003etasks\u003c/strong\u003e, una para cada \u003cstrong\u003epartición\u003c/strong\u003e del RDD.\u003c/li\u003e\n\u003c/ul\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913795_-193630196",
      "id": "20160729-095410_1619479256",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "print(s\"\"\"%html\n\u0026nbsp;\n\u003cimg src\u003d\"$baseDir/stage-tasks.png\" alt\u003d\"Drawing\" style\u003d\"width: 100%;\"/\u003e\n\"\"\")",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 6.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u0026nbsp;\n\u003cimg src\u003d\"https://cs.famaf.unc.edu.ar/~damian/bigdata/curso/posgrado_optativa/lectivo/presentaciones/04_rdd_notebook/stage-tasks.png\" alt\u003d\"Drawing\" style\u003d\"width: 100%;\"/\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913796_-195553940",
      "id": "20160729-104015_819248214",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n#### Job:\n* Comienza con el RDD que dispara la acción.\n* Eventualmente incluye otros RDD\u0027s según el **grafo de dependencias**.\n\n\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\n",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 6.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 84.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch4\u003eJob:\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eComienza con el RDD que dispara la acción.\u003c/li\u003e\n\u003cli\u003eEventualmente incluye otros RDD\u0027s según el \u003cstrong\u003egrafo de dependencias\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913797_-195938689",
      "id": "20160729-104645_1867345422",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Stage:\n* Subconjunto de operaciones a aplicadar en secuencia.\n* Se delimitan según la necesidad de intercambio de datos entre nodos (ej. `intersection`).\n    - Parten el grafo de dependencias según los puntos de intercambio.\n    - Un stage contiene secuencias de *narrow transformations* unidas en puntos de intercambian datos (*shuffle boundary*).\n* Producen *barreras* donde otras stages deben esperar su resultado.\n* Conforman un grafo nuevo.",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 6.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch4\u003eStage:\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eSubconjunto de operaciones a aplicadar en secuencia.\u003c/li\u003e\n\u003cli\u003eSe delimitan según la necesidad de intercambio de datos entre nodos (ej. \u003ccode\u003eintersection\u003c/code\u003e).\u003cul\u003e\n\u003cli\u003eParten el grafo de dependencias según los puntos de intercambio.\u003c/li\u003e\n\u003cli\u003eUn stage contiene secuencias de \u003cem\u003enarrow transformations\u003c/em\u003e unidas en puntos de intercambian datos (\u003cem\u003eshuffle boundary\u003c/em\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eProducen \u003cem\u003ebarreras\u003c/em\u003e donde otras stages deben esperar su resultado.\u003c/li\u003e\n\u003cli\u003eConforman un grafo nuevo.\u003c/li\u003e\n\u003c/ul\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913797_-195938689",
      "id": "20160729-105310_364353621",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Grafo de Dependencias/Grafo de Stages",
      "text": "print(s\"\"\"%html\n\u003cimg src\u003d\"$baseDir/dagscheduler-stages.png\" alt\u003d\"Drawing\" style\u003d\"width: 100%;\"/\u003e\n\"\"\")",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 6.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cimg src\u003d\"https://cs.famaf.unc.edu.ar/~damian/bigdata/curso/posgrado_optativa/lectivo/presentaciones/04_rdd_notebook/dagscheduler-stages.png\" alt\u003d\"Drawing\" style\u003d\"width: 100%;\"/\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913798_-194784442",
      "id": "20160729-121539_794985257",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n####Tasks:\n\n* Partes de un stage como mínimas unidades de ejecución.\n* Son enviadas a los executors en los nodos.\n* Una por partición.\n* En orden según grafo de dependencias.\n* Ejecutan los siguientes pasos:\n    - leen la entrada de datos de almacenamiento externo, otro RDD cacheado o lo producido por tareas de mezcla (task shuffle).\n    - ejecutan las transformaciones (optimizando)\n    - escriben las salida a un mezclador, almacenamiento externo o al driver (por ejecución de acción).",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 6.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch4\u003eTasks:\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003ePartes de un stage como mínimas unidades de ejecución.\u003c/li\u003e\n\u003cli\u003eSon enviadas a los executors en los nodos.\u003c/li\u003e\n\u003cli\u003eUna por partición.\u003c/li\u003e\n\u003cli\u003eEn orden según grafo de dependencias.\u003c/li\u003e\n\u003cli\u003eEjecutan los siguientes pasos:\u003cul\u003e\n\u003cli\u003eleen la entrada de datos de almacenamiento externo, otro RDD cacheado o lo producido por tareas de mezcla (task shuffle).\u003c/li\u003e\n\u003cli\u003eejecutan las transformaciones (optimizando)\u003c/li\u003e\n\u003cli\u003eescriben las salida a un mezclador, almacenamiento externo o al driver (por ejecución de acción).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913799_-195169191",
      "id": "20160729-122600_874955681",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val uiHost \u003d sc.getConf.getOption(\"spark.driver.host\").getOrElse(\"localhost\")\nval uiPort \u003d sc.getConf.getOption(\"spark.ui.port\").getOrElse(\"4040\")\nprint(s\"\"\"\n%html\n\u003cbr\u003e\nVer la representación de estos conceptos en Spark UI\n\u003ca href\u003d\"http://$uiHost:$uiPort\"\u003ehttp://$uiHost(host):$uiPort(port)\u003c/a\u003e\n\"\"\")",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 6.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cbr\u003e\nVer la representación de estos conceptos en Spark UI\n\u003ca href\u003d\"http://192.168.128.215:4040\"\u003ehttp://192.168.128.215(host):4040(port)\u003c/a\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913800_-197092936",
      "id": "20160729-124534_976548333",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md \n## ~.-Reparticionado\n\nLos RDD se distribuyen en particiones a través de los nodos.\nSegún como cambien los datos (creación de RDD) puede ser util moverlos cambiando las particiones.\n\u003cbr\u003e\nEl siguiente ejemplo es un programa que calcula numero primos hasta un `n`:\n* calcula todos los numero que son multiplos de otros dos (compuestos)\n* y los resta a todos los numeros hasta `n`.\n\nCorrer el siguiente ejemplo y ver grafo y *Stages* del *Job* en Spark UI.",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch2\u003e~.-Reparticionado\u003c/h2\u003e\n\u003cp\u003eLos RDD se distribuyen en particiones a través de los nodos.\n\u003cbr  /\u003eSegún como cambien los datos (creación de RDD) puede ser util moverlos cambiando las particiones.\n\u003cbr  /\u003e\u003cbr\u003e\n\u003cbr  /\u003eEl siguiente ejemplo es un programa que calcula numero primos hasta un \u003ccode\u003en\u003c/code\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ecalcula todos los numero que son multiplos de otros dos (compuestos)\u003c/li\u003e\n\u003cli\u003ey los resta a todos los numeros hasta \u003ccode\u003en\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eCorrer el siguiente ejemplo y ver grafo y \u003cem\u003eStages\u003c/em\u003e del \u003cem\u003eJob\u003c/em\u003e en Spark UI.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913800_-197092936",
      "id": "20160811-182728_1985106852",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Ejemplo: Numeros Primos",
      "text": "val n \u003d 2000000\nval compuestos \u003d sc.parallelize(2 to n, 8).map(x \u003d\u003e (x, (2 to (n / x)))).flatMap{case (x, ms) \u003d\u003e ms.map(_ * x)}\nval primos \u003d sc.parallelize(2 to n, 8).subtract(compuestos)\nprimos.collect()",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": {},
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1505335913801_-197477685",
      "id": "20160811-180542_502600160",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nEn Spark UI se puede ver que:\n* Se crean 3 Stages.\n* En la primera (donde se calcula `compuestos`) una task (un core) hace el 90% del trabajo\n    - las otros esperan.\n\nQue sucede?\n* Al hacer `parallelize` se distrubuyen los datos en particiones (nodos).\n* Al hacer el primer `map`  se alteran creciendo en tamaño los números más grandes: tienen más multiplicadores.\n\nSolución:\n* Volver a particionar después del `map`\n    - Distribuirá mejor los datos y uso de procesamiento\n    - **pero** habrá intercambio de datos entre nodos\n    - **por lo tanto** generará una nueva etapa.\n\nEjecutar el siguiente programa y ver resultado en Spark UI\n",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eEn Spark UI se puede ver que:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSe crean 3 Stages.\u003c/li\u003e\n\u003cli\u003eEn la segunda (donde se calcula \u003ccode\u003ecompuestos\u003c/code\u003e) una task (un core) hace el 90% del trabajo\u003cul\u003e\n\u003cli\u003elas otros esperan.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eQue sucede?\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAl hacer \u003ccode\u003eparallelize\u003c/code\u003e se distrubuyen los datos en particiones (nodos).\u003c/li\u003e\n\u003cli\u003eAl hacer el primer \u003ccode\u003emap\u003c/code\u003e  se alteran creciendo en tamaño los números más grandes: tienen más multiplicadores.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSolución:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eVolver a particionar después del \u003ccode\u003emap\u003c/code\u003e\u003cul\u003e\n\u003cli\u003eDistribuirá mejor los datos y uso de procesamiento\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003epero\u003c/strong\u003e habrá intercambio de datos entre nodos\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003epor lo tanto\u003c/strong\u003e generará una nueva etapa.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEjecutar el siguiente programa y ver resultado en Spark UI\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913802_-196323438",
      "id": "20160811-183442_1361422879",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val n \u003d 2000000\nval compuestos \u003d sc.parallelize(2 to n, 8).map(x \u003d\u003e (x, (2 to (n / x)))).repartition(8).flatMap{case (x, ms) \u003d\u003e ms.map(_ * x)}\nval primos \u003d sc.parallelize(2 to n, 8).subtract(compuestos)\nprimos.collect()",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {},
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nn: Int \u003d 2000000\n\ncompuestos: org.apache.spark.rdd.RDD[Int] \u003d MapPartitionsRDD[14] at flatMap at \u003cconsole\u003e:29\n\nprimos: org.apache.spark.rdd.RDD[Int] \u003d MapPartitionsRDD[19] at subtract at \u003cconsole\u003e:31\nres1: Array[Int] \u003d Array(1048601, 17, 41, 1048633, 1048609, 73, 524353, 89, 524369, 1572929, 97, 113, 1048681, 1048721, 137, 1573009, 193, 1573081, 1048793, 524497, 1573057, 524521, 233, 241, 257, 281, 1048889, 313, 524593, 1573153, 337, 524633, 1048897, 1573193, 353, 1573217, 524681, 401, 409, 433, 449, 457, 1049057, 521, 524801, 1049089, 1049137, 524857, 569, 1049129, 577, 524873, 1049177, 593, 601, 1049201, 617, 524921, 641, 673, 524969, 1573553, 525001, 1049297, 525017, 1049281, 1573577, 761, 769, 809, 857, 525137, 1573753, 881, 525193, 1049497, 525209, 1049473, 929, 937, 525241, 953, 525257, 977, 1049537, 1009, 1049569, 1033, 525313, 1049, 525353, 1573937, 525361, 1573921, 1049681, 1097, 525377, 1573969, 1573961, 1574009, 1129, 525409, 525433, 1153, 525457, 1193, 1201, 1574057, 121..."
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913802_-196323438",
      "id": "20160811-181651_1061365705",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "FIN",
      "text": "val baseDir\u003d\"https://cs.famaf.unc.edu.ar/~damian/bigdata/curso/posgrado_optativa/lectivo/presentaciones/04_rdd_notebook\"\nprint(\"\"\"%html\n\u003cscript\u003e\n    var heads \u003d document.getElementsByTagName(\u0027h2\u0027);\n    var numHeads \u003d heads.length;\n    var inner \u003d \"\";\n    var i \u003d 0;\n    var j \u003d 0;\n    while (i \u003c numHeads){\n        inner \u003d heads[i].innerHTML;\n        if (inner.search(\".-\") !\u003d -1 ) {\n            j++;\n            heads[i].innerHTML \u003d inner.replace(/(~|\\d+)\\.-/,\"\"+j+\".-\");\n        }\n        i++\n    }\n\u003c/script\u003e\n\"\"\")\n",
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cscript\u003e\n    var heads \u003d document.getElementsByTagName(\u0027h2\u0027);\n    var numHeads \u003d heads.length;\n    var inner \u003d \"\";\n    var i \u003d 0;\n    var j \u003d 0;\n    while (i \u003c numHeads){\n        inner \u003d heads[i].innerHTML;\n        if (inner.search(\".-\") !\u003d -1 ) {\n            j++;\n            heads[i].innerHTML \u003d inner.replace(/(~|\\d+)\\.-/,\"\"+j+\".-\");\n        }\n        i++\n    }\n\u003c/script\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1505335913803_-196708187",
      "id": "20160719-200319_1498591788",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "dateUpdated": "Sep 13, 2017 5:51:53 PM",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1505335913804_-198631931",
      "id": "20160801-155852_2095574272",
      "dateCreated": "Sep 13, 2017 5:51:53 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Presentación 03 - RDD\u0027s",
  "id": "2CVFV5DX8",
  "angularObjects": {
    "2CTKXJ91G:shared_process": [],
    "2CTC675DT:shared_process": [],
    "2CT93HPHF:shared_process": [],
    "2CTDZWPUC:shared_process": [],
    "2CSPR66JC:shared_process": [],
    "2CTKY84DJ:shared_process": [],
    "2CT41Q7GT:shared_process": [],
    "2CQGWGNA6:shared_process": [],
    "2CSKKWSA5:shared_process": [],
    "2CRU3VFAF:shared_process": [],
    "2CR3BU4KG:shared_process": [],
    "2CTF9XXQF:shared_process": [],
    "2CQHHT5KA:shared_process": [],
    "2CR3YHT87:shared_process": [],
    "2CST9WTQD:shared_process": [],
    "2CQXU29E1:shared_process": [],
    "2CT72QXQM:shared_process": [],
    "2CRYAP7WN:shared_process": [],
    "2CRH1RUYC:shared_process": []
  },
  "config": {},
  "info": {}
}