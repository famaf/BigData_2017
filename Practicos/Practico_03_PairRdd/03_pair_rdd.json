{"paragraphs":[{"text":"val baseDir=\"https://cs.famaf.unc.edu.ar/~damian/bigdata/curso/posgrado_optativa/lectivo/presentaciones/03_rdd_notebook\"\nprint(\"\"\"%html\n<center>\n    <h1>Programación Distribuida sobre Grandes Volúmenes de Datos</h1>\n</center>\n\n<br>\n\n<h3 style=\"text-align:center;\">\n    <a href=\"http://www.famaf.unc.edu.ar\">\n    Facultad de Matemática Astronomía Física y Computación\n    </a>\n<br/>\n    <a href=\"http://www.unc.edu.ar\">\n    Universidad Nacional de Córdoba\n    </a>\n<br/>\n    <center>\n    <a href=\"http://www.famaf.unc.edu.ar\">\n    <img src=\"https://cs.famaf.unc.edu.ar/~damian/bigdata/curso/posgrado_optativa/lectivo/presentaciones/comun/logo%20UNC%20FAMAF%202016.svg\" alt=\"Drawing\" style=\"width:50%;\"/>\n    </a>\n    </center>\n</h3>\n\n<h4 style=\"text-align:center;\"> Damián Barsotti - Ezequiel Orbe </h4>\n\n<p style=\"font-size:15px;\">\n    <br />\n        This work is licensed under a\n        <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.\n    <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">\n        <img alt=\"Creative Commons License\" style=\"border-width:0;vertical-align:middle;float:right\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" />\n    </a>\n</p>\n\"\"\")","dateUpdated":"2017-09-27T01:54:56-0300","config":{"editorMode":"ace/mode/scala","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":false,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<center>\n    <h1>Programación Distribuida sobre Grandes Volúmenes de Datos</h1>\n</center>\n\n<br>\n\n<h3 style=\"text-align:center;\">\n    <a href=\"http://www.famaf.unc.edu.ar\">\n    Facultad de Matemática Astronomía Física y Computación\n    </a>\n<br/>\n    <a href=\"http://www.unc.edu.ar\">\n    Universidad Nacional de Córdoba\n    </a>\n<br/>\n    <center>\n    <a href=\"http://www.famaf.unc.edu.ar\">\n    <img src=\"https://cs.famaf.unc.edu.ar/~damian/bigdata/curso/posgrado_optativa/lectivo/presentaciones/comun/logo%20UNC%20FAMAF%202016.svg\" alt=\"Drawing\" style=\"width:50%;\"/>\n    </a>\n    </center>\n</h3>\n\n<h4 style=\"text-align:center;\"> Damián Barsotti - Ezequiel Orbe </h4>\n\n<p style=\"font-size:15px;\">\n    <br />\n        This work is licensed under a\n        <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.\n    <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">\n        <img alt=\"Creative Commons License\" style=\"border-width:0;vertical-align:middle;float:right\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" />\n    </a>\n</p>\n"}]},"apps":[],"jobName":"paragraph_1506488096967_-102885347","id":"20160905-160017_311070424","dateCreated":"2017-09-27T01:54:56-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:26"},{"text":"%md \n###Ejercicio 1\nHacer un programa que calcule las 10 palabras, con mas de 3 caracteres, mas frecuentes en el `README`.","dateUpdated":"2017-09-27T01:54:56-0300","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":false,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Ejercicio 1</h3>\n<p>Hacer un programa que calcule las 10 palabras, con mas de 3 caracteres, mas frecuentes en el <code>README</code>.</p>\n"}]},"apps":[],"jobName":"paragraph_1506488096968_-104809092","id":"20160905-160017_1185419370","dateCreated":"2017-09-27T01:54:56-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:27"},{"text":"val file = sc.textFile(\"README.md\")\n\n// En el filter poner que sean mas de 3 caracteres\nval words = file.flatMap(_.split(\" \")).filter(_.length > 3) // Le saca los vacios\nval wordCount = words.map(x => (x,1)).reduceByKey((nx,ny) => nx+ny)\nval result = wordCount.takeOrdered(10)(Ordering[Int].reverse.on (_._2))\n\nprintln(\"%table\\nWord\\tCount\")\nresult.foreach{case (w,c) => println(\"\\\"\" + w + \"\\\"\" + \"\\t\" + c)}\n","user":"anonymous","dateUpdated":"2017-09-27T01:55:54-0300","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","lineNumbers":true,"editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nfile: org.apache.spark.rdd.RDD[String] = README.md MapPartitionsRDD[300] at textFile at <console>:30\n\nwords: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[302] at filter at <console>:34\n\nwordCount: org.apache.spark.rdd.RDD[(String, Int)] = ShuffledRDD[304] at reduceByKey at <console>:34\n\nresult: Array[(String, Int)] = Array((from,4), (Zeppelin,3), (Apache,3), (notebook,2), (Please,2), (binary,2), ([User,2), (interactive,2), (collaborative,1), (more.,1))\n"},{"type":"TABLE","data":"Word\tCount\n\"from\"\t4\n\"Zeppelin\"\t3\n\"Apache\"\t3\n\"notebook\"\t2\n\"Please\"\t2\n\"binary\"\t2\n\"[User\"\t2\n\"interactive\"\t2\n\"collaborative\"\t1\n\"more.\"\t1\n"}]},"apps":[],"jobName":"paragraph_1506488113229_2130227917","id":"20170927-015513_1986855629","dateCreated":"2017-09-27T01:55:13-0300","dateStarted":"2017-09-27T01:55:54-0300","dateFinished":"2017-09-27T01:55:56-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:28"},{"text":"%md \n###Ejercicio 2\nDada las siguientes collecciones de pares de elementos:\n\n```\n(\"a\",1),(\"b\",4)\n(\"a\",2),(\"b\",2), (\"c\",5), (\"a\",7)\n(\"a\",2),(\"b\",2), (\"c\",5)\n```\nCalcule la suma total para cada key usando `cogroup`.\n\n```\n(a,12)\n(b,8)\n(c,10)\n```\n\n","dateUpdated":"2017-09-27T01:54:56-0300","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":false,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Ejercicio 2</h3>\n<p>Dada las siguientes collecciones de pares de elementos:</p>\n<pre><code>(\"a\",1),(\"b\",4)\n(\"a\",2),(\"b\",2), (\"c\",5), (\"a\",7)\n(\"a\",2),(\"b\",2), (\"c\",5)\n</code></pre>\n<p>Calcule la suma total para cada key usando <code>cogroup</code>.</p>\n<pre><code>(a,12)\n(b,8)\n(c,10)\n</code></pre>\n"}]},"apps":[],"jobName":"paragraph_1506488096968_-104809092","id":"20160905-160017_1137558371","dateCreated":"2017-09-27T01:54:56-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29"},{"text":"val rdd1 = sc.parallelize(Seq( (\"a\",1), (\"b\",4) ))\nval rdd2 = sc.parallelize(Seq( (\"a\",2), (\"b\",2), (\"c\",5), (\"a\",7) ))\nval rdd3 = sc.parallelize(Seq( (\"a\",2), (\"b\",2), (\"c\",5) ))\n\nval grouped = rdd1.cogroup(rdd2, rdd3)\n\ngrouped.collect()\n\nval grouped_list = grouped.mapValues(cb => (cb._1.toList, cb._2.toList, cb._3.toList))\n\ngrouped_list.collect()\n\nval grouped_union = grouped_list.mapValues(x => x.productIterator.toList.asInstanceOf[List[List[Int]]].flatten.sum)\n//val grouped_union = grouped_list.mapValues(x => (x._1 ++ x._2 ++ x._3).sum)\ngrouped_union.collect()\n","user":"anonymous","dateUpdated":"2017-09-27T01:57:03-0300","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","lineNumbers":true,"editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nrdd1: org.apache.spark.rdd.RDD[(String, Int)] = ParallelCollectionRDD[306] at parallelize at <console>:30\n\nrdd2: org.apache.spark.rdd.RDD[(String, Int)] = ParallelCollectionRDD[307] at parallelize at <console>:30\n\nrdd3: org.apache.spark.rdd.RDD[(String, Int)] = ParallelCollectionRDD[308] at parallelize at <console>:30\n\ngrouped: org.apache.spark.rdd.RDD[(String, (Iterable[Int], Iterable[Int], Iterable[Int]))] = MapPartitionsRDD[310] at cogroup at <console>:37\n\nres186: Array[(String, (Iterable[Int], Iterable[Int], Iterable[Int]))] = Array((a,(CompactBuffer(1),CompactBuffer(2, 7),CompactBuffer(2))), (b,(CompactBuffer(4),CompactBuffer(2),CompactBuffer(2))), (c,(CompactBuffer(),CompactBuffer(5),CompactBuffer(5))))\n\ngrouped_list: org.apache.spark.rdd.RDD[(String, (List[Int], List[Int], List[Int]))] = MapPartitionsRDD[311] at mapValues at <console>:39\n\nres189: Array[(String, (List[Int], List[Int], List[Int]))] = Array((a,(List(1),List(2, 7),List(2))), (b,(List(4),List(2),List(2))), (c,(List(),List(5),List(5))))\n\ngrouped_union: org.apache.spark.rdd.RDD[(String, Int)] = MapPartitionsRDD[312] at mapValues at <console>:41\n\nres192: Array[(String, Int)] = Array((a,12), (b,8), (c,10))\n"}]},"apps":[],"jobName":"paragraph_1506488201720_65219274","id":"20170927-015641_375794752","dateCreated":"2017-09-27T01:56:41-0300","dateStarted":"2017-09-27T01:56:58-0300","dateFinished":"2017-09-27T01:57:00-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30"},{"text":"%md \n###Ejercicio 3\nRepita el ejercicio anterior usando `union`","dateUpdated":"2017-09-27T01:54:56-0300","config":{"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":false,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Ejercicio 3</h3>\n<p>Repita el ejercicio anterior usando <code>union</code></p>\n"}]},"apps":[],"jobName":"paragraph_1506488096969_-105193841","id":"20160905-160017_2044115803","dateCreated":"2017-09-27T01:54:56-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:31"},{"text":"val rdd1 = sc.parallelize(Seq( (\"a\",1), (\"b\",4) ))\nval rdd2 = sc.parallelize(Seq( (\"a\",2), (\"b\",2), (\"c\",5), (\"a\",7) ))\nval rdd3 = sc.parallelize(Seq( (\"a\",2), (\"b\",2), (\"c\",5) ))\n\nval g_1 = rdd1.union(rdd2)\nval g_2 = g_1.union(rdd3)\nval gg = g_2.reduceByKey(_ + _)\n//g_2.collect()\ngg.collect()\n\n\n//val grouped_list = grouped.mapValues(cb => (cb._1.toList, cb._2.toList, cb._3.toList))\n\n//grouped_list.collect()\n\n//val grouped_union = grouped_list.mapValues(x => x.productIterator.toList.asInstanceOf[List[List[Int]]].flatten.sum)\n//val grouped_union = grouped_list.mapValues(x => (x._1 ++ x._2 ++ x._3).sum)\n//grouped_union.collect()\n","user":"anonymous","dateUpdated":"2017-09-27T01:57:31-0300","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","lineNumbers":true,"editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nrdd1: org.apache.spark.rdd.RDD[(String, Int)] = ParallelCollectionRDD[313] at parallelize at <console>:30\n\nrdd2: org.apache.spark.rdd.RDD[(String, Int)] = ParallelCollectionRDD[314] at parallelize at <console>:30\n\nrdd3: org.apache.spark.rdd.RDD[(String, Int)] = ParallelCollectionRDD[315] at parallelize at <console>:30\n\ng_1: org.apache.spark.rdd.RDD[(String, Int)] = UnionRDD[316] at union at <console>:35\n\ng_2: org.apache.spark.rdd.RDD[(String, Int)] = UnionRDD[317] at union at <console>:38\n\ngg: org.apache.spark.rdd.RDD[(String, Int)] = ShuffledRDD[318] at reduceByKey at <console>:40\n\nres195: Array[(String, Int)] = Array((a,12), (b,8), (c,10))\n"}]},"apps":[],"jobName":"paragraph_1506488228582_-1421603718","id":"20170927-015708_1553154192","dateCreated":"2017-09-27T01:57:08-0300","dateStarted":"2017-09-27T01:57:31-0300","dateFinished":"2017-09-27T01:57:33-0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:32"},{"text":"%md\n### Ejercicio 4\n\n[DBPedia](http://wiki.dbpedia.org/) es una síntesis estructurada de las relaciones que aparecen en la Wikipedia.\nEstructura sus datos en 2 tipos de archivos:\n* **Propiedades** - Archivo que contiene 3-uplas con (sujeto,relación,predicado), por ejemplo (Aristoteles, Año de nacimiento, -384)\n* **Tipos** - Archivo que contiene 3-uplas con (sujeto, sintaxis de tipo, tipo del sujeto).\n\nEn los *Archivos de prueba* de la materia hay extractos de los mismos (`mappingbased_properties_en.nt` y `instance_types_en.nt`).\n\nAnalizar el formato de estos archivos sanearlos para crear los RDD teniendo en cuenta que:\n* no se pueden modificar a mano los archivos.\n* puede haber lineas basura. Son las que no comienzan con el caracter `<`\n* puede haber lineas en blanco.\n* cada linea termina con un punto que hay que descartar.\n* un sujeto puede aparecer en varias lineas con distintas relacion/predicado en `mappingbased_properties_en.nt`\n* un sujeto puede tener varios tipos en `instance_types_en.nt`.\n* La sintaxis de tipo en el archivo `instance_types_en.nt` no hay que tenerla en cuenta en el algoritmo.\n\nEl programa debe producir una salida que agregue a las propiedades los tipos del sujeto como una lista, de forma tal que cada linea tenga la información de la 4-upla (sujeto, [tipos del sujeto], relación, predicado).\n\n","dateUpdated":"2017-09-27T01:54:56-0300","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Ejercicio 4</h3>\n<p><a href=\"http://wiki.dbpedia.org/\">DBPedia</a> es una síntesis estructurada de las relaciones que aparecen en la Wikipedia.<br/>Estructura sus datos en 2 tipos de archivos:<br/>* <strong>Propiedades</strong> - Archivo que contiene 3-uplas con (sujeto,relación,predicado), por ejemplo (Aristoteles, Año de nacimiento, -384)<br/>* <strong>Tipos</strong> - Archivo que contiene 3-uplas con (sujeto, sintaxis de tipo, tipo del sujeto).</p>\n<p>En los <em>Archivos de prueba</em> de la materia hay extractos de los mismos (<code>mappingbased_properties_en.nt</code> y <code>instance_types_en.nt</code>).</p>\n<p>Analizar el formato de estos archivos sanearlos para crear los RDD teniendo en cuenta que:<br/>* no se pueden modificar a mano los archivos.<br/>* puede haber lineas basura. Son las que no comienzan con el caracter <code>&lt;</code><br/>* puede haber lineas en blanco.<br/>* cada linea termina con un punto que hay que descartar.<br/>* un sujeto puede aparecer en varias lineas con distintas relacion/predicado en <code>mappingbased_properties_en.nt</code><br/>* un sujeto puede tener varios tipos en <code>instance_types_en.nt</code>.<br/>* La sintaxis de tipo en el archivo <code>instance_types_en.nt</code> no hay que tenerla en cuenta en el algoritmo.</p>\n<p>El programa debe producir una salida que agregue a las propiedades los tipos del sujeto como una lista, de forma tal que cada linea tenga la información de la 4-upla (sujeto, [tipos del sujeto], relación, predicado).</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1506488096969_-105193841","id":"20160905-160017_934396210","dateCreated":"2017-09-27T01:54:56-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:33"},{"dateUpdated":"2017-09-27T01:54:56-0300","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1506488096970_-104039594","id":"20160905-173543_424151923","dateCreated":"2017-09-27T01:54:56-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:34"}],"name":"Práctico 3 - Key Value RDD's","id":"2CWVGAXSR","angularObjects":{"2CQY683MD:shared_process":[],"2CRGPDJTN:shared_process":[],"2CTZD3XCX:shared_process":[],"2CRMCDEQM:shared_process":[],"2CTAV9E28:shared_process":[],"2CRA7KCDA:shared_process":[],"2CQ81X7G5:shared_process":[],"2CRUQ6EVN:shared_process":[],"2CTHYC7X9:shared_process":[],"2CRHWDFYM:shared_process":[],"2CQJ7MXW5:shared_process":[],"2CQAR5VSM:shared_process":[],"2CRCFF6HB:shared_process":[],"2CTK8TR8Q:shared_process":[],"2CQN5Q87B:shared_process":[],"2CTW5YZGW:shared_process":[],"2CSR7EJVT:shared_process":[],"2CRUQ7EXT:shared_process":[],"2CRFFBRXJ:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}