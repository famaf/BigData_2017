{
  "paragraphs": [
    {
      "config": {
        "colWidth": 12,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": false,
        "editorMode": "ace/mode/scala",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471432323056_1100744076",
      "id": "20160817-081203_553106990",
      "dateCreated": "Aug 17, 2016 8:12:03 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "focus": true,
      "$$hashKey": "object:839",
      "text": "val baseDir=\"https://cs.famaf.unc.edu.ar/~damian/bigdata/curso/posgrado_optativa/lectivo/presentaciones/03_rdd_notebook\"\nprint(\"\"\"%html\n<center>\n    <h1>Programación Distribuida sobre Grandes Volúmenes de Datos</h1>\n</center>\n\n<br>\n\n<h3 style=\"text-align:center;\">\n    <a href=\"http://www.famaf.unc.edu.ar\">\n    Facultad de Matemática Astronomía Física y Computación\n    </a>\n<br/>\n    <a href=\"http://www.unc.edu.ar\">\n    Universidad Nacional de Córdoba\n    </a>\n<br/>\n    <center>\n    <a href=\"http://www.famaf.unc.edu.ar\">\n    <img src=\"https://cs.famaf.unc.edu.ar/~damian/bigdata/curso/posgrado_optativa/lectivo/presentaciones/comun/logo%20UNC%20FAMAF%202016.svg\" alt=\"Drawing\" style=\"width:50%;\"/>\n    </a>\n    </center>\n</h3>\n\n<h4 style=\"text-align:center;\"> Damián Barsotti - Ezequiel Orbe </h4>\n\n<p style=\"font-size:15px;\">\n    <br />\n        This work is licensed under a\n        <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.\n    <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">\n        <img alt=\"Creative Commons License\" style=\"border-width:0;vertical-align:middle;float:right\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" />\n    </a>\n</p>\n\"\"\")\n",
      "dateUpdated": "Aug 17, 2016 8:12:40 AM",
      "dateFinished": "Aug 17, 2016 8:12:29 AM",
      "dateStarted": "Aug 17, 2016 8:12:27 AM",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "<center>\n    <h1>Programación Distribuida sobre Grandes Volúmenes de Datos</h1>\n</center>\n\n<br>\n\n<h3 style=\"text-align:center;\">\n    <a href=\"http://www.famaf.unc.edu.ar\">\n    Facultad de Matemática Astronomía Física y Computación\n    </a>\n<br/>\n    <a href=\"http://www.unc.edu.ar\">\n    Universidad Nacional de Córdoba\n    </a>\n<br/>\n    <center>\n    <a href=\"http://www.famaf.unc.edu.ar\">\n    <img src=\"https://cs.famaf.unc.edu.ar/~damian/bigdata/curso/posgrado_optativa/lectivo/presentaciones/comun/logo%20UNC%20FAMAF%202016.svg\" alt=\"Drawing\" style=\"width:50%;\"/>\n    </a>\n    </center>\n</h3>\n\n<h4 style=\"text-align:center;\"> Damián Barsotti - Ezequiel Orbe </h4>\n\n<p style=\"font-size:15px;\">\n    <br />\n        This work is licensed under a\n        <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.\n    <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">\n        <img alt=\"Creative Commons License\" style=\"border-width:0;vertical-align:middle;float:right\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" />\n    </a>\n</p>\n"
      }
    },
    {
      "config": {
        "colWidth": 12,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": false,
        "editorMode": "ace/mode/scala",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471432400510_-1037446768",
      "id": "20160817-081320_1105843555",
      "dateCreated": "Aug 17, 2016 8:13:20 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "focus": true,
      "$$hashKey": "object:875",
      "text": "%md #Tutorial Scala (parte 1)\n\nEste tutorial de `scala` ayudará a entender los conceptos básicos para programar en este lenguaje.\nSe presentarán los temas con la posibilidad de ejecutar y modificar los ejemplos en la misma página de lectura para que puedas probar y familiarizarte con el lenguaje.\n\n####Uso del notebook\n\n* Para ejecutar los programa presiona **[`Shift`]-[`Enter`]** o cliquea en el triangulito arriba a la derecha de cada celda.\n* Tambien podes copiar los programas dados en este notebook a un archivo y correrlo con un interprete `scala` con el siguiente comando `:load <nombre de archivo.scala>`.\n* Para hacer copy and paste desde el notebook selecciona con **[`Ctrl`]-[*flechitas*]** y hacer **[`Ctrl`]-[`c`]** y **[`Ctrl`]-[`v`]**.",
      "dateUpdated": "Aug 17, 2016 8:17:21 AM",
      "dateFinished": "Aug 17, 2016 8:17:02 AM",
      "dateStarted": "Aug 17, 2016 8:17:02 AM",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "<h1>Tutorial Scala (parte 1)</h1>\n<p>Este tutorial de <code>scala</code> ayudará a entender los conceptos básicos para programar en este lenguaje.\n<br  />Se presentarán los temas con la posibilidad de ejecutar y modificar los ejemplos en la misma página de lectura para que puedas probar y familiarizarte con el lenguaje.</p>\n<h4>Uso del notebook</h4>\n<ul>\n<li>Para ejecutar los programa presiona <strong>[<code>Shift</code>]-[<code>Enter</code>]</strong> o cliquea en el triangulito arriba a la derecha de cada celda.</li>\n<li>Tambien podes copiar los programas dados en este notebook a un archivo y correrlo con un interprete <code>scala</code> con el siguiente comando <code>:load &lt;nombre de archivo.scala&gt;</code>.</li>\n<li>Para hacer copy and paste desde el notebook selecciona con <strong>[<code>Ctrl</code>]-[<em>flechitas</em>]</strong> y hacer <strong>[<code>Ctrl</code>]-[<code>c</code>]</strong> y <strong>[<code>Ctrl</code>]-[<code>v</code>]</strong>.</li>\n</ul>\n"
      }
    },
    {
      "config": {
        "colWidth": 12,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": false,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471432652417_-665426875",
      "id": "20160817-081732_753026246",
      "dateCreated": "Aug 17, 2016 8:17:32 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "focus": true,
      "$$hashKey": "object:909",
      "text": "%md ##Características Principales del Lenguaje",
      "dateUpdated": "Aug 17, 2016 8:19:38 AM",
      "dateFinished": "Aug 17, 2016 8:18:47 AM",
      "dateStarted": "Aug 17, 2016 8:18:47 AM",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "<h2>Características Principales del Lenguaje</h2>\n"
      }
    },
    {
      "title": "Características Principales",
      "text": "%md \n- `scala` (**scala**lable language) es un lenguaje desarrollado desde 2001 en el Programming Methods Laboratory de la EPFL bajo la dirección de [Martin Odersky](https://en.wikipedia.org/wiki/Martin_Odersky).\n\n- Fue diseñado con el objetivo de permitir su crecimiento en función a las necesidades de sus usuarios (de allí su nombre).\n\n- Combina conceptos de programación funcional y programación orientada a objetos en un lenguaje con **[tipado estático](http://stackoverflow.com/questions/1517582/what-is-the-difference-between-statically-typed-and-dynamically-typed-languages)**.\n\n- **Es** un lenguaje orientado a objetos puro (como Smalltalk) en el cual todo valor es un objeto y toda operación es una llamada a un método.\n\n- **No** es un lenguaje funcional puro (como Haskell) que fuerza a programar en un estilo funcional. \n\n-  Es un híbrido imperativo/funcional que permite programar en un estilo imperativo, aunque sugiere adoptar un estilo funcional.\n\n- Corre en la plataforma  JAVA e interopera con todas las librerías JAVA.\n\n- Bibliografía recomendada: \n    - **[Programming in Scala](http://booksites.artima.com/programming_in_scala_3ed)** (Martin Odersky, Lex Spoon, and Bill Venners) \n    - **[Documentación Oficial de Scala](http://www.scala-lang.org/documentation/)**\n",
      "dateUpdated": "Aug 17, 2016 8:17:37 AM",
      "config": {
        "colWidth": 12,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": false,
        "editorMode": "ace/mode/markdown",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1467599906782_-106006260",
      "id": "20160703-233826_1193307973",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "<ul>\n<li><p><code>scala</code> (<strong>scala</strong>lable language) es un lenguaje desarrollado desde 2001 en el Programming Methods Laboratory de la EPFL bajo la dirección de <a href=\"https://en.wikipedia.org/wiki/Martin_Odersky\">Martin Odersky</a>.</p>\n</li>\n<li><p>Fue diseñado con el objetivo de permitir su crecimiento en función a las necesidades de sus usuarios (de allí su nombre).</p>\n</li>\n<li><p>Combina conceptos de programación funcional y programación orientada a objetos en un lenguaje con <strong><a href=\"http://stackoverflow.com/questions/1517582/what-is-the-difference-between-statically-typed-and-dynamically-typed-languages\">tipado estático</a></strong>.</p>\n</li>\n<li><p><strong>Es</strong> un lenguaje orientado a objetos puro (como Smalltalk) en el cual todo valor es un objeto y toda operación es una llamada a un método.</p>\n</li>\n<li><p><strong>No</strong> es un lenguaje funcional puro (como Haskell) que fuerza a programar en un estilo funcional.</p>\n</li>\n<li><p>Es un híbrido imperativo/funcional que permite programar en un estilo imperativo, aunque sugiere adoptar un estilo funcional.</p>\n</li>\n<li><p>Corre en la plataforma  JAVA e interopera con todas las librerías JAVA.</p>\n</li>\n<li><p>Bibliografía recomendada:</p>\n<ul>\n<li><strong><a href=\"http://booksites.artima.com/programming_in_scala_3ed\">Programming in Scala</a></strong> (Martin Odersky, Lex Spoon, and Bill Venners)</li>\n<li><strong><a href=\"http://www.scala-lang.org/documentation/\">Documentación Oficial de Scala</a></strong></li>\n</ul>\n</li>\n</ul>\n"
      },
      "dateCreated": "Jul 3, 2016 11:38:26 PM",
      "dateStarted": "Aug 17, 2016 8:02:13 AM",
      "dateFinished": "Aug 17, 2016 8:02:13 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:52"
    },
    {
      "title": "Variables",
      "text": "%md ##Variables",
      "dateUpdated": "Aug 17, 2016 8:19:42 AM",
      "config": {
        "colWidth": 12,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": false,
        "editorMode": "ace/mode/markdown",
        "title": false,
        "tableHide": false,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471404395823_-1542961153",
      "id": "20160817-002635_1001761052",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "<h2>Variables</h2>\n"
      },
      "dateCreated": "Aug 17, 2016 12:26:35 AM",
      "dateStarted": "Aug 17, 2016 8:18:52 AM",
      "dateFinished": "Aug 17, 2016 8:18:53 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:53",
      "focus": true
    },
    {
      "title": "",
      "text": "%md\n- `scala` tiene dos tipos de variables: `vars` y `vals`.\n\n- Un variable `val` (a veces llamada directamente `valor`) es inmutable y no puede ser reasignada una vez inicializada.\n\t \n- Una variable `var`, por el contrario, es mutable y puede ser reasignada.\n\n- Al momento de declarar variables siempre hay que inicializarlas.\n\n---\n - El tipo de una variable se especifica luego del nombre de la misma separado por `:` (e.g.:`var x : <type>`)\n \n - El compilador `scala` hace **inferencia de tipos** por lo cual se pueden evitar las anotaciones de tipos.\n\n- Para mantener el código limpio, se recomienda evitar las anotaciones de tipos que no sean necesarias y dejar que el compilador los infiera.\n\n---\n- Es posible declarar y asignar múltiples variables al mismo tiempo.\n\n- Se pueden inicializar múltiples variables usando tuplas.",
      "dateUpdated": "Aug 17, 2016 8:03:14 AM",
      "config": {
        "colWidth": 12,
        "graph": {
          "mode": "table",
          "height": 492,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": false,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1467677037991_-216452650",
      "id": "20160704-210357_412606283",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "<ul>\n<li><p><code>scala</code> tiene dos tipos de variables: <code>vars</code> y <code>vals</code>.</p>\n</li>\n<li><p>Un variable <code>val</code> (a veces llamada directamente <code>valor</code>) es inmutable y no puede ser reasignada una vez inicializada.</p>\n</li>\n<li><p>Una variable <code>var</code>, por el contrario, es mutable y puede ser reasignada.</p>\n</li>\n<li><p>Al momento de declarar variables siempre hay que inicializarlas.</p>\n</li>\n</ul>\n<hr />\n<ul>\n<li><p>El tipo de una variable se especifica luego del nombre de la misma separado por <code>:</code> (e.g.:<code>var x : &lt;type&gt;</code>)</p>\n</li>\n<li><p>El compilador <code>scala</code> hace <strong>inferencia de tipos</strong> por lo cual se pueden evitar las anotaciones de tipos.</p>\n</li>\n<li><p>Para mantener el código limpio, se recomienda evitar las anotaciones de tipos que no sean necesarias y dejar que el compilador los infiera.</p>\n</li>\n</ul>\n<hr />\n<ul>\n<li><p>Es posible declarar y asignar múltiples variables al mismo tiempo.</p>\n</li>\n<li><p>Se pueden inicializar múltiples variables usando tuplas.</p>\n</li>\n</ul>\n"
      },
      "dateCreated": "Jul 4, 2016 9:03:57 PM",
      "dateStarted": "Aug 15, 2016 11:38:15 AM",
      "dateFinished": "Aug 15, 2016 11:38:16 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:54"
    },
    {
      "title": "Variables VAL",
      "text": "//¿funciona?\nval x:Int = 2\nx = 3",
      "dateUpdated": "Aug 17, 2016 12:26:00 AM",
      "config": {
        "colWidth": 6,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "tableHide": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1467678934684_24528212",
      "id": "20160704-213534_1142623231",
      "dateCreated": "Jul 4, 2016 9:35:34 PM",
      "dateStarted": "Aug 15, 2016 11:24:29 AM",
      "dateFinished": "Aug 15, 2016 11:24:29 AM",
      "status": "ERROR",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:55"
    },
    {
      "title": "Variables VAR",
      "text": "//¿funciona?\nvar x:Int = 2\nx = 3",
      "dateUpdated": "Aug 17, 2016 12:26:00 AM",
      "config": {
        "colWidth": 6,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1467679074338_1518675112",
      "id": "20160704-213754_1736162540",
      "dateCreated": "Jul 4, 2016 9:37:54 PM",
      "dateStarted": "Aug 15, 2016 11:24:34 AM",
      "dateFinished": "Aug 15, 2016 11:24:35 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:56"
    },
    {
      "title": "Inferencia de Tipos",
      "text": "//¿que tipos tienen las variables?\nval x = 2\nval y = \"Scala!\"\nval z = List(1,2,3)",
      "dateUpdated": "Aug 17, 2016 12:26:00 AM",
      "config": {
        "colWidth": 6,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1467679366069_685879802",
      "id": "20160704-214246_1274038938",
      "dateCreated": "Jul 4, 2016 9:42:46 PM",
      "dateStarted": "Aug 15, 2016 11:24:39 AM",
      "dateFinished": "Aug 15, 2016 11:24:40 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:57"
    },
    {
      "title": "Declaraciones múltiples",
      "text": "//¿que valores toman x,y,z en cada caso?\n var x, y, z = 0\n var (x, y, z) = (1, 2, 3)",
      "dateUpdated": "Aug 17, 2016 12:26:36 AM",
      "config": {
        "colWidth": 6,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1467685398616_-778066814",
      "id": "20160704-232318_690063668",
      "dateCreated": "Jul 4, 2016 11:23:18 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:58"
    },
    {
      "title": "Funciones",
      "text": "%md ##Funciones",
      "dateUpdated": "Aug 17, 2016 8:19:48 AM",
      "config": {
        "colWidth": 12,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": false,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false,
        "title": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471391635403_-1209279435",
      "id": "20160816-205355_75257690",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "<h2>Funciones</h2>\n"
      },
      "dateCreated": "Aug 16, 2016 8:53:55 PM",
      "dateStarted": "Aug 17, 2016 8:19:00 AM",
      "dateFinished": "Aug 17, 2016 8:19:00 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:59",
      "focus": true
    },
    {
      "title": "",
      "text": "%md\n\n\n - La definición de una función comienza con la palabra clave `def` seguida por el nombre de la función y por una lista, separada por comas, de los parámetros de la función entre paréntesis.\n \n - Una anotación de tipo debe seguir a cada parámetro ya que el compilador no hace inferencia sobre los tipos de los parámetros.\n \n - Opcionalmente se puede indicar explícitamente el tipo que retorna la función luego de la lista de parámetros. Si no se indica el tipo, el compilador lo inferirá.\n \n- Si la función es recursiva **siempre** se debe indicar el tipo que retorna.\n\n- El cuerpo de una función está delimitado por llaves  `{ <body> }`. Si la función solo contiene una sentencia, se pueden omitir las llaves. \n\n- Por defecto, una función retorna el valor de la última expresión en su cuerpo y se puede omitir la palabra clave `return`. Si en cambio se quiere retornar un valor distinto al de la última expresión entonces se debe especificar con `return`. \n\n- Una función que retorna `Unit` no retorna un valor interesante y solo se ejecuta por sus efectos secundarios. `Unit` es el equivalente a `void` en C y Java. \n\n ---\n \n - Se pueden definir funciones dentro de otras funciones. Estas funciones anidadas son visibles solo dentro del bloque donde se las declara y pueden acceder a los parámetros de la función que las contiene.\n \n - `scala` también soporta: lista de parámetros de longitud variable, parámetros nombrados y valores por defecto. \n \n - `scala` también realiza la optimización de recursión a la cola (tail-recursion optimization). \n ",
      "dateUpdated": "Aug 17, 2016 12:34:13 AM",
      "config": {
        "colWidth": 12,
        "graph": {
          "mode": "table",
          "height": 95,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": false,
        "editorMode": "ace/mode/markdown",
        "title": false,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471391114433_2032507004",
      "id": "20160816-204514_471265966",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "<ul>\n<li><p>La definición de una función comienza con la palabra clave <code>def</code> seguida por el nombre de la función y por una lista, separada por comas, de los parámetros de la función entre paréntesis.</p>\n</li>\n<li><p>Una anotación de tipo debe seguir a cada parámetro ya que el compilador no hace inferencia sobre los tipos de los parámetros.</p>\n</li>\n<li><p>Opcionalmente se puede indicar explícitamente el tipo que retorna la función luego de la lista de parámetros. Si no se indica el tipo, el compilador lo inferirá.</p>\n</li>\n<li><p>Si la función es recursiva <strong>siempre</strong> se debe indicar el tipo que retorna.</p>\n</li>\n<li><p>El cuerpo de una función está delimitado por llaves  <code>{ &lt;body&gt; }</code>. Si la función solo contiene una sentencia, se pueden omitir las llaves.</p>\n</li>\n<li><p>Por defecto, una función retorna el valor de la última expresión en su cuerpo y se puede omitir la palabra clave <code>return</code>. Si en cambio se quiere retornar un valor distinto al de la última expresión entonces se debe especificar con <code>return</code>.</p>\n</li>\n<li><p>Una función que retorna <code>Unit</code> no retorna un valor interesante y solo se ejecuta por sus efectos secundarios. <code>Unit</code> es el equivalente a <code>void</code> en C y Java.</p>\n<hr />\n</li>\n<li><p>Se pueden definir funciones dentro de otras funciones. Estas funciones anidadas son visibles solo dentro del bloque donde se las declara y pueden acceder a los parámetros de la función que las contiene.</p>\n</li>\n<li><p><code>scala</code> también soporta: lista de parámetros de longitud variable, parámetros nombrados y valores por defecto.</p>\n</li>\n<li><p><code>scala</code> también realiza la optimización de recursión a la cola (tail-recursion optimization).</p>\n</li>\n</ul>\n"
      },
      "dateCreated": "Aug 16, 2016 8:45:14 PM",
      "dateStarted": "Aug 17, 2016 12:33:53 AM",
      "dateFinished": "Aug 17, 2016 12:33:54 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:60"
    },
    {
      "title": "Definición de Función",
      "text": "def max(x: Int, y: Int) : Int = {\n\tif (x > y)\n\t\tx\n\telse\n\t\ty\n}",
      "dateUpdated": "Aug 17, 2016 12:16:19 AM",
      "config": {
        "colWidth": 6,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471391293637_-804799427",
      "id": "20160816-204813_1453918901",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "max: (x: Int, y: Int)Int\n"
      },
      "dateCreated": "Aug 16, 2016 8:48:13 PM",
      "dateStarted": "Aug 17, 2016 12:16:20 AM",
      "dateFinished": "Aug 17, 2016 12:16:21 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:61"
    },
    {
      "title": "Definición sin especificación de tipos de los Parametros",
      "text": "//¿funciona?\ndef min(x, y) = {\n\tif (x > y)\n\t\tx\n\telse\n\t\ty\n}\n",
      "dateUpdated": "Aug 17, 2016 12:17:02 AM",
      "config": {
        "colWidth": 6,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471391447850_-1695276948",
      "id": "20160816-205047_1696755979",
      "dateCreated": "Aug 16, 2016 8:50:47 PM",
      "dateStarted": "Aug 17, 2016 12:16:26 AM",
      "dateFinished": "Aug 17, 2016 12:16:26 AM",
      "status": "ERROR",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:62"
    },
    {
      "title": "Definición omitiendo el tipo que se retorna",
      "text": "//¿que tipo retorna?\ndef max(x: Int, y: Int) = {\n\tif (x > y)\n\t\tx\n\telse\n\t\ty\n}",
      "dateUpdated": "Aug 17, 2016 12:28:22 AM",
      "config": {
        "colWidth": 6,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471391536153_-852571232",
      "id": "20160816-205216_1228789597",
      "dateCreated": "Aug 16, 2016 8:52:16 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:63"
    },
    {
      "title": "Función recursiva",
      "text": "//¿fuciona?\ndef inc(x: Int, n: Int) = {\n\tif (x < n)\n\t\tinc((x+1), n)\n\telse\n\t\tx\n}   ",
      "dateUpdated": "Aug 17, 2016 12:28:52 AM",
      "config": {
        "colWidth": 6,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "title": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471391588011_-1961356265",
      "id": "20160816-205308_433997936",
      "dateCreated": "Aug 16, 2016 8:53:08 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:64"
    },
    {
      "title": "Funciones anidadas",
      "text": "//¿Es visible buildString fuera de printFullName?\ndef printFullName(name: String, lastname: String) = {\n\tdef buildString() = {\n\t\t\"Hello \" + name + \" \" + lastname + \"!!\"\n\t}\n\tprintln(buildString)\n} \n",
      "dateUpdated": "Aug 17, 2016 12:30:12 AM",
      "config": {
        "colWidth": 6,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471397836437_-1778973620",
      "id": "20160816-223716_543125792",
      "dateCreated": "Aug 16, 2016 10:37:16 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:65"
    },
    {
      "title": "Uso del Return",
      "text": "//¿que retorna?\ndef max2(x: Int, y: Int) = {\n\tif (x > y)\n\t\treturn x\n\telse\n\t\treturn y\n\t0\n}",
      "dateUpdated": "Aug 17, 2016 12:29:45 AM",
      "config": {
        "colWidth": 6,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471391584577_-2119103314",
      "id": "20160816-205304_1477244175",
      "dateCreated": "Aug 16, 2016 8:53:04 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:66"
    },
    {
      "title": "Nro. de parámetros variable",
      "text": "//¿funciona?\ndef echo(args: String*) =\n    for (arg <- args) println(arg)\n\necho(“hola“)\necho(“hola“, “chau“)\n//parámetros nombrados.\n\n//parámetros por defecto.",
      "dateUpdated": "Aug 17, 2016 12:32:43 AM",
      "config": {
        "colWidth": 6,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471401795776_713883426",
      "id": "20160816-234315_448901351",
      "dateCreated": "Aug 16, 2016 11:43:15 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:67"
    },
    {
      "title": "Omitiendo las llaves",
      "text": "//¿que tipo retorna?\ndef square(x: Int) = x*x",
      "dateUpdated": "Aug 17, 2016 12:30:54 AM",
      "config": {
        "colWidth": 6,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471391809973_-1686708492",
      "id": "20160816-205649_1284984828",
      "dateCreated": "Aug 16, 2016 8:56:49 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:68"
    },
    {
      "title": "Function Literals",
      "text": "%md ##Function Literals",
      "dateUpdated": "Aug 17, 2016 8:19:54 AM",
      "config": {
        "colWidth": 12,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": false,
        "editorMode": "ace/mode/markdown",
        "title": false,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471406788778_-1629328273",
      "id": "20160817-010628_484969835",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "<h2>Function Literals</h2>\n"
      },
      "dateCreated": "Aug 17, 2016 1:06:28 AM",
      "dateStarted": "Aug 17, 2016 8:19:07 AM",
      "dateFinished": "Aug 17, 2016 8:19:07 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:69",
      "focus": true
    },
    {
      "title": "Function Literals",
      "text": "%md \n\n- En Scala las funciones son valores de primera clase (first-class values). No solo se pueden definir funciones, sino que también se pueden definir literales de función (function literals) y tratarlas como valores.\n\n- Un **literal de función** se define especificando una lista de parámetros entre paréntesis, el símbolo `=>`y el cuerpo de la función.\n- Si el cuerpo del literal de función contiene más de una sentencia se puede definir el cuerpo entre llaves. `{ <body> }`\n\n- Un literal de función se puede definir de forma concisa de la siguiente forma:\n\t- Omitiendo el tipo de los parámetros \n\t- Omitiendo los paréntesis.\n\t- Usando `_` como placeholder para uno o más parámetros.\n\t- Múltiples `_` implican múltiples parámetros, no la reutilización de un",
      "dateUpdated": "Aug 17, 2016 8:03:47 AM",
      "config": {
        "colWidth": 12,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": false,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471402472934_-993080522",
      "id": "20160816-235432_58239161",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "<ul>\n<li><p>En Scala las funciones son valores de primera clase (first-class values). No solo se pueden definir funciones, sino que también se pueden definir literales de función (function literals) y tratarlas como valores.</p>\n</li>\n<li><p>Un <strong>literal de función</strong> se define especificando una lista de parámetros entre paréntesis, el símbolo <code>=&gt;</code>y el cuerpo de la función.</p>\n</li>\n<li><p>Si el cuerpo del literal de función contiene más de una sentencia se puede definir el cuerpo entre llaves. <code>{ &lt;body&gt; }</code></p>\n</li>\n<li><p>Un literal de función se puede definir de forma concisa de la siguiente forma:</p>\n<ul>\n<li>Omitiendo el tipo de los parámetros</li>\n<li>Omitiendo los paréntesis.</li>\n<li>Usando <code>_</code> como placeholder para uno o más parámetros.</li>\n<li>Múltiples <code>_</code> implican múltiples parámetros, no la reutilización de un</li>\n</ul>\n</li>\n</ul>\n"
      },
      "dateCreated": "Aug 16, 2016 11:54:32 PM",
      "dateStarted": "Aug 17, 2016 12:08:05 AM",
      "dateFinished": "Aug 17, 2016 12:08:05 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:70"
    },
    {
      "title": "Definición de un function literal",
      "text": "//¿que tipos retornan?\nvar increase = (x: Int) => x + 1\nvar sum = (x: Int, y: Int) => x + y",
      "dateUpdated": "Aug 17, 2016 12:40:24 AM",
      "config": {
        "colWidth": 6,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471402521528_830472733",
      "id": "20160816-235521_448466848",
      "dateCreated": "Aug 16, 2016 11:55:21 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:71"
    },
    {
      "title": "Variantes sintácticas",
      "text": "val someNumbers = List(-2, -1, 0, 1, 2)\n\n//¿retornan lo mismo?\nsomeNumbers.filter((x: Int) => x > 0)\nsomeNumbers.filter((x) => x > 0)\nsomeNumbers.filter(x => x > 0)\nsomeNumbers.filter(_ > 0)\n\n//¿porque funciona esto?\nsomeNumbers.fold(0)(_+_)",
      "dateUpdated": "Aug 17, 2016 12:41:25 AM",
      "config": {
        "colWidth": 6,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "tableHide": false,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471402738509_-592979416",
      "id": "20160816-235858_384188929",
      "result": {
        "code": "ERROR",
        "type": "TEXT"
      },
      "dateCreated": "Aug 16, 2016 11:58:58 PM",
      "dateStarted": "Aug 17, 2016 12:03:56 AM",
      "dateFinished": "Aug 17, 2016 12:03:57 AM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:72"
    },
    {
      "title": "Ejemplos",
      "text": "def add1(x:Int, y:Int) = x + y // función\n\nval add2 = (x:Int, y:Int) => x + y //función anónima  \nval add3:(Int,Int)=>Int = _ + _ // otra forma\nval add4 = (_ + _):(Int,Int)=>Int //otra forma más   \n\nprintln(add1(42,13),add2(42,13),add3(42,13),add4(42,13),add5(42,13))\n\nval add5 = add1 _ // Convierte método en función\ndef add6(x:Int, y:Int) = add2(x,y)  // Convierte función en método\n\nprintln(add5(42,13),add6(42,13))",
      "dateUpdated": "Aug 17, 2016 1:03:25 AM",
      "config": {
        "enabled": true,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "colWidth": 6,
        "editorHide": false,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466722935007_-1789826123",
      "id": "20160623-200215_54822284",
      "dateCreated": "Jun 23, 2016 8:02:15 PM",
      "dateStarted": "Jul 2, 2016 11:34:01 AM",
      "dateFinished": "Jul 2, 2016 11:34:04 AM",
      "status": "ERROR",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:73"
    },
    {
      "title": "Ejemplos",
      "text": "%md\n* El primer ejemplo (`add1`) define un función como ya vimos\n* El segundo es como en el ejemplo anterior solo que asignando la función a una variable. Esto hace que se le ponga un nombre a la función anónima (`add2`)\n* El tercer y cuarto ejemplo usa los guiones bajos (`_`) como ya vimos. Esta forma es poco usada en `scala` cuando se definen funciones. Se usa frecuentemente cuando la función anónima se pasa como parámetro (alto orden).\n* Después de ejecutar este ejemplo compare los tipos de las funciones `add1` y las demás. \n* En `scala` las funciones y los métodos no son lo mismo pero se pueden convertir (ver `add5` y `add6`). \n",
      "dateUpdated": "Aug 17, 2016 8:03:57 AM",
      "config": {
        "enabled": false,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "colWidth": 6,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466722935007_-1789826123",
      "id": "20160623-200215_1324927078",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "<ul>\n<li>El primer ejemplo (<code>add1</code>) define un función como ya vimos</li>\n<li>El segundo es como en el ejemplo anterior solo que asignando la función a una variable. Esto hace que se le ponga un nombre a la función anónima (<code>add2</code>)</li>\n<li>El tercer y cuarto ejemplo usa los guiones bajos (<code>_</code>) como ya vimos. Esta forma es poco usada en <code>scala</code> cuando se definen funciones. Se usa frecuentemente cuando la función anónima se pasa como parámetro (alto orden).</li>\n<li>Después de ejecutar este ejemplo compare los tipos de las funciones <code>add1</code> y las demás.</li>\n<li>Como ya se mencionó en <code>scala</code> las funciones y los métodos no son lo mismo pero se pueden convertir (ver <code>add5</code> y <code>add6</code>).</li>\n</ul>\n"
      },
      "dateCreated": "Jun 23, 2016 8:02:15 PM",
      "dateStarted": "Aug 17, 2016 1:02:43 AM",
      "dateFinished": "Aug 17, 2016 1:02:43 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:74"
    },
    {
      "title": "Cosas que te pueden interesar",
      "text": "%md \n* [Scala Functions vs Methods](http://jim-mcbeath.blogspot.com.ar/2009/05/scala-functions-vs-methods.html).\n* [Functional Scala: Turning Methods into Functions (or WTF is eta expansion?)](https://gleichmann.wordpress.com/2011/01/09/functional-scala-turning-methods-into-functions/).\n*  [Más sobre funciones anónimas](http://docs.scala-lang.org/tutorials/tour/anonymous-function-syntax.html).",
      "dateUpdated": "Aug 17, 2016 8:04:02 AM",
      "config": {
        "colWidth": 12,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": false,
        "editorMode": "ace/mode/markdown",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471404908633_678342032",
      "id": "20160817-003508_150760482",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "<ul>\n<li><a href=\"http://jim-mcbeath.blogspot.com.ar/2009/05/scala-functions-vs-methods.html\">Scala Functions vs Methods</a>.</li>\n<li><a href=\"https://gleichmann.wordpress.com/2011/01/09/functional-scala-turning-methods-into-functions/\">Functional Scala: Turning Methods into Functions (or WTF is eta expansion?)</a>.</li>\n<li><a href=\"http://docs.scala-lang.org/tutorials/tour/anonymous-function-syntax.html\">Más sobre funciones anónimas</a>.</li>\n</ul>\n"
      },
      "dateCreated": "Aug 17, 2016 12:35:08 AM",
      "dateStarted": "Aug 17, 2016 12:43:19 AM",
      "dateFinished": "Aug 17, 2016 12:43:19 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:75"
    },
    {
      "text": "%md ##Estructuras de Control",
      "dateUpdated": "Aug 17, 2016 8:20:01 AM",
      "config": {
        "enabled": false,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "colWidth": 12
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466722935008_-1804061832",
      "id": "20160623-200215_23879145",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "<h2>Estructuras de Control</h2>\n"
      },
      "dateCreated": "Jun 23, 2016 8:02:15 PM",
      "dateStarted": "Aug 17, 2016 8:19:13 AM",
      "dateFinished": "Aug 17, 2016 8:19:13 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:76",
      "focus": true
    },
    {
      "title": "While",
      "text": "%md &nbsp;\n- `scala` tiene la sentencia `while` para crear bucles. \n- No tiene el *clásico* bucle `for` de C, Java, Fortran, etc.\n- `scala` no tiene por defecto los operadores de decremento `--` e incremento `++` pero se pueden usar los operadores `-=` y `+=` para hacer lo mismo.",
      "dateUpdated": "Aug 17, 2016 8:04:13 AM",
      "config": {
        "enabled": false,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "colWidth": 6,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466722935008_-1804061832",
      "id": "20160623-200215_838802559",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "<p>&nbsp;</p>\n<ul>\n<li><code>scala</code> tiene la sentencia <code>while</code> para crear bucles.</li>\n<li>No tiene el <em>clásico</em> bucle <code>for</code> de C, Java, Fortran, etc.</li>\n<li><code>scala</code> no tiene por defecto los operadores de decremento <code>--</code> e incremento <code>++</code> pero se pueden usar los operadores <code>-=</code> y <code>+=</code> para hacer lo mismo.</li>\n</ul>\n"
      },
      "dateCreated": "Jun 23, 2016 8:02:15 PM",
      "dateStarted": "Aug 17, 2016 1:21:33 AM",
      "dateFinished": "Aug 17, 2016 1:21:33 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:77"
    },
    {
      "title": "While",
      "text": "var i, sum = 0  \nwhile ( i < 10) {  \n  sum += i  \n  i+=1  \n}  \nprintln(sum)\n",
      "dateUpdated": "Aug 17, 2016 1:22:32 AM",
      "config": {
        "enabled": true,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 6,
        "editorHide": false,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466722935008_-1804061832",
      "id": "20160623-200215_1076609123",
      "dateCreated": "Jun 23, 2016 8:02:15 PM",
      "dateStarted": "Jul 2, 2016 11:34:05 AM",
      "dateFinished": "Jul 2, 2016 11:34:06 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:78"
    },
    {
      "title": "For",
      "text": "%md &nbsp;\n- `scala` tiene una sentencia `for` distinta que la de los lenguajes C, Java, etc. con la cual se puede simular la de estos lenguajes.\n- La sentencia `for` es en realidad muy poderosa. \n- En el siguiente ejemplo la sentencia `for` toma los posibles valores de la variable `i` de una secuencia (ya lo vimos).\n- Para más información ver: [Bucles en Scala](http://www.tutorialspoint.com/scala/scala_for_loop.htm).",
      "dateUpdated": "Aug 17, 2016 8:04:18 AM",
      "config": {
        "enabled": false,
        "tableHide": false,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "colWidth": 6,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466722935009_-1804446581",
      "id": "20160623-200215_1753481700",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "<p>&nbsp;</p>\n<ul>\n<li><code>scala</code> tiene una sentencia <code>for</code> distinta que la de los lenguajes C, Java, etc. con la cual se puede simular la de estos lenguajes.</li>\n<li>La sentencia <code>for</code> es en realidad muy poderosa.</li>\n<li>En el siguiente ejemplo la sentencia <code>for</code> toma los posibles valores de la variable <code>i</code> de una secuencia (ya lo vimos).</li>\n<li>Para más información ver: <a href=\"http://www.tutorialspoint.com/scala/scala_for_loop.htm\">Bucles en Scala</a>.</li>\n</ul>\n"
      },
      "dateCreated": "Jun 23, 2016 8:02:15 PM",
      "dateStarted": "Aug 17, 2016 1:23:22 AM",
      "dateFinished": "Aug 17, 2016 1:23:23 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:79"
    },
    {
      "title": "For",
      "text": "var sum = 0  \nfor ( i <- 0 until 10) {\n  sum += i  \n}  \nprintln(sum)\n\nfor (i <- List(1,2,3)) println(i)\n\n",
      "dateUpdated": "Aug 17, 2016 1:28:20 AM",
      "config": {
        "enabled": true,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorHide": false,
        "colWidth": 6,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466722935009_-1804446581",
      "id": "20160623-200215_567407727",
      "result": {
        "code": "ERROR",
        "type": "TEXT"
      },
      "dateCreated": "Jun 23, 2016 8:02:15 PM",
      "dateStarted": "Aug 17, 2016 1:23:19 AM",
      "dateFinished": "Aug 17, 2016 1:23:21 AM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:80"
    },
    {
      "title": "Bucles implícitos",
      "text": "%md &nbsp;\n- En `scala` se pueden definir bucles de manera funcional (declarativa) aprovechando los métodos propios de las secuencias<sep>1</sep>, como `sum` en el siguiente ejemplo.\n\n- Los métodos para secuencias pueden encontrarse en [API GenTraversableOnce](http://www.scala-lang.org/api/current/index.html#scala.collection.GenTraversableOnce).",
      "dateUpdated": "Aug 17, 2016 8:04:28 AM",
      "config": {
        "enabled": false,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "colWidth": 6,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466722935009_-1804446581",
      "id": "20160623-200215_249693191",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "<p>&nbsp;</p>\n<ul>\n<li><p>En <code>scala</code> se pueden definir bucles de manera funcional (declarativa) aprovechando los métodos propios de las secuencias<sep>1</sep>, como <code>sum</code> en el siguiente ejemplo.</p>\n</li>\n<li><p>Los métodos para secuencias pueden encontrarse en <a href=\"http://www.scala-lang.org/api/current/index.html#scala.collection.GenTraversableOnce\">API GenTraversableOnce</a>.</p>\n</li>\n</ul>\n"
      },
      "dateCreated": "Jun 23, 2016 8:02:15 PM",
      "dateStarted": "Aug 17, 2016 1:25:20 AM",
      "dateFinished": "Aug 17, 2016 1:25:21 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:81"
    },
    {
      "title": "Bucles Implícitos",
      "text": "(0 until 10).sum\n(1 until 10 by 2).product\n\n\n",
      "dateUpdated": "Aug 17, 2016 1:27:59 AM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 6,
        "editorHide": false,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466722935009_-1804446581",
      "id": "20160623-200215_540994360",
      "dateCreated": "Jun 23, 2016 8:02:15 PM",
      "dateStarted": "Jul 2, 2016 11:34:08 AM",
      "dateFinished": "Jul 2, 2016 11:34:10 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:82"
    },
    {
      "title": "If",
      "text": "%md \n- Los `if`'s funcionan igual que en todos los lenguajes.\n- En `scala` todas las construcciones son expresiones, inclusive las sentencias `if`.",
      "dateUpdated": "Aug 17, 2016 8:04:49 AM",
      "config": {
        "enabled": false,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "colWidth": 6,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466722935010_-1803292334",
      "id": "20160623-200215_1820589274",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "<ul>\n<li>Los <code>if</code>'s funcionan igual que en todos los lenguajes.</li>\n<li>En <code>scala</code> todas las construcciones son expresiones, inclusive las sentencias <code>if</code>.</li>\n</ul>\n"
      },
      "dateCreated": "Jun 23, 2016 8:02:15 PM",
      "dateStarted": "Aug 17, 2016 1:26:54 AM",
      "dateFinished": "Aug 17, 2016 1:26:54 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:83"
    },
    {
      "title": "If",
      "text": "if (true)   \n  println(\"no son necesarias la llavaes con una sola sentencia\")  \n\nif (1 + 1 == 2) {  \n  println(\"multiples\")  \n  println(\"sentencias\")  \n  println(\"requieren\")  \n  println(\"llaves\")  \n} else {  \n  println(\"la matemática está equivocada!\")  \n  println(\"o su computadora se volció loca\")  \n}  \n\nval vegano = false  \nval almuerzo =  if (vegano) \"lechuga\" else \"choripan\"  \n\nprintln(almuerzo)  ",
      "dateUpdated": "Aug 17, 2016 1:27:05 AM",
      "config": {
        "enabled": true,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "colWidth": 6,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466722935010_-1803292334",
      "id": "20160623-200215_1927221105",
      "dateCreated": "Jun 23, 2016 8:02:15 PM",
      "dateStarted": "Jul 2, 2016 11:34:09 AM",
      "dateFinished": "Jul 2, 2016 11:34:11 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:84"
    },
    {
      "text": "%md ##Operaciones útiles\n\nA continuación veremos algunos ejemplos de diferentes operaciones que resultan muy útiles en `scala`. Experimenta con los ejemplos. Algunos conceptos que aparecen van a ser explicados después.",
      "dateUpdated": "Aug 17, 2016 8:20:07 AM",
      "config": {
        "enabled": false,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "colWidth": 12
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466722935005_-1790595621",
      "id": "20160623-200215_1819320049",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "<h2>Operaciones útiles</h2>\n<p>A continuación veremos algunos ejemplos de diferentes operaciones que resultan muy útiles en <code>scala</code>. Experimenta con los ejemplos. Algunos conceptos que aparecen van a ser explicados después.</p>\n"
      },
      "dateCreated": "Jun 23, 2016 8:02:15 PM",
      "dateStarted": "Aug 17, 2016 8:19:20 AM",
      "dateFinished": "Aug 17, 2016 8:19:20 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:85",
      "focus": true
    },
    {
      "title": "Imprimir en Pantalla",
      "text": "%md \n- Scala tiene un *shortcut* al `Sistem.out.println` de Java como así también `print`, `printf`, etc.\n- Se puede usar `printf`. Ver [Printf cheat sheet](http://alvinalexander.com/programming/printf-format-cheat-sheet).\n- Todas están definidas en una clase que se importa por defecto (`scala.Predef`). \n\n- Para más información ver: [scala.Predef](http://www.scala-lang.org/api/current/index.html#scala.Predef$).",
      "dateUpdated": "Aug 17, 2016 8:05:05 AM",
      "config": {
        "enabled": false,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "colWidth": 6,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466722935002_-1787902378",
      "id": "20160623-200215_1667859618",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "<ul>\n<li><p>Scala tiene un <em>shortcut</em> al <code>Sistem.out.println</code> de Java como así también <code>print</code>, <code>printf</code>, etc.</p>\n</li>\n<li><p>Se puede usar <code>printf</code>. Ver <a href=\"http://alvinalexander.com/programming/printf-format-cheat-sheet\">Printf cheat sheet</a>.</p>\n</li>\n<li><p>Todas están definidas en una clase que se importa por defecto (<code>scala.Predef</code>).</p>\n</li>\n<li><p>Para más información ver: <a href=\"http://www.scala-lang.org/api/current/index.html#scala.Predef$\">scala.Predef</a>.</p>\n</li>\n</ul>\n"
      },
      "dateCreated": "Jun 23, 2016 8:02:15 PM",
      "dateStarted": "Aug 17, 2016 12:54:35 AM",
      "dateFinished": "Aug 17, 2016 12:54:35 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:86"
    },
    {
      "title": "Imprimir en pantalla",
      "text": "\n//usando println\nprintln(\"Hola mundo\")\n\n//usando printf\nprintf(\"El número que le sigue a 2 es %.16f (casi).\", Math.nextAfter(2.0, 3))\n\n",
      "dateUpdated": "Aug 17, 2016 1:07:24 AM",
      "config": {
        "enabled": true,
        "tableHide": false,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 6,
        "editorHide": false,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466722935002_-1787902378",
      "id": "20160623-200215_810868533",
      "dateCreated": "Jun 23, 2016 8:02:15 PM",
      "dateStarted": "Jul 2, 2016 11:33:38 AM",
      "dateFinished": "Jul 2, 2016 11:33:42 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:87"
    },
    {
      "title": "Interpolación de Strings",
      "text": "%md \n- Es un mecanismo que permite embeber valores de variables dentro de un string.\n- Se indica mediante una `s` delante de la primer comilla del string.\n- También se pueden embeber expresiones más compejas encerrándolas entre llaves:\n\n- Para más información ver: [String interpolation in Scala](http://docs.scala-lang.org/overviews/core/string-interpolation.html).",
      "dateUpdated": "Aug 17, 2016 8:05:08 AM",
      "config": {
        "enabled": false,
        "tableHide": false,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "colWidth": 6,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466722935004_-1790210872",
      "id": "20160623-200215_439954318",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "<ul>\n<li><p>Es un mecanismo que permite embeber valores de variables dentro de un string.</p>\n</li>\n<li><p>Se indica mediante una <code>s</code> delante de la primer comilla del string.</p>\n</li>\n<li><p>También se pueden embeber expresiones más compejas encerrándolas entre llaves:</p>\n</li>\n<li><p>Para más información ver: <a href=\"http://docs.scala-lang.org/overviews/core/string-interpolation.html\">String interpolation in Scala</a>.</p>\n</li>\n</ul>\n"
      },
      "dateCreated": "Jun 23, 2016 8:02:15 PM",
      "dateStarted": "Aug 17, 2016 1:04:54 AM",
      "dateFinished": "Aug 17, 2016 1:04:54 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:88"
    },
    {
      "title": "Interpolación de Strings",
      "text": "import scala.math._  \nval dosPi = Pi*2\nprintln(s\"Dame $dosPi zas\")\nprintln(s\"Mejor dame ${4 * Pi} zas\")\n",
      "dateUpdated": "Aug 17, 2016 1:07:25 AM",
      "config": {
        "enabled": true,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 6,
        "editorHide": false,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466722935004_-1790210872",
      "id": "20160623-200215_903540991",
      "dateCreated": "Jun 23, 2016 8:02:15 PM",
      "dateStarted": "Jul 2, 2016 11:33:42 AM",
      "dateFinished": "Jul 2, 2016 11:33:45 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:89"
    },
    {
      "title": "Rangos",
      "text": "//crea un range entre 1 y 10 inclusive \nval range = 1 to 10   \n//crea un range entre 1 y 10 excluyéndolo   \nval range2 = 1 until 10   \n//desde 2 a 10 saltando de a 3  \nval range3 = 2 until 10 by 3   \n// Convierte a lista\nprintln(range3.toList)  ",
      "dateUpdated": "Aug 17, 2016 1:18:09 AM",
      "config": {
        "enabled": true,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 6,
        "editorHide": false,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466722935005_-1790595621",
      "id": "20160623-200215_1180409461",
      "dateCreated": "Jun 23, 2016 8:02:15 PM",
      "dateStarted": "Jul 2, 2016 11:33:45 AM",
      "dateFinished": "Jul 2, 2016 11:33:48 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:90"
    },
    {
      "title": "Números",
      "text": "val num = -5  \nval numAbs = num.abs //valor absoluto  \nval max5or7 = numAbs.max(7)  \nval min5or7 = numAbs.min(7)  \nprintln(numAbs) \nprintln(max5or7)   \nprintln(min5or7)   \n",
      "dateUpdated": "Aug 17, 2016 1:19:08 AM",
      "config": {
        "enabled": true,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 6,
        "editorHide": false,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466722935005_-1790595621",
      "id": "20160623-200215_1422775772",
      "dateCreated": "Jun 23, 2016 8:02:15 PM",
      "dateStarted": "Jul 2, 2016 11:33:46 AM",
      "dateFinished": "Jul 2, 2016 11:33:51 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:91"
    },
    {
      "title": "Operaciones sobre Strings",
      "text": "val reverse = \"Scala\".reverse //da vuelta el string   \nprintln(reverse)\n\nval cap = \"scala\".capitalize //Pone primera letra en mayúscula  \nprintln(cap)\n\nval multi = \"Scala!\" * 7 //repite n veces   \nprintln(multi)\n\nval int = \"123\".toInt //parsea a Int  \nprintln(int)  ",
      "dateUpdated": "Aug 17, 2016 1:19:08 AM",
      "config": {
        "enabled": true,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 6,
        "editorHide": false,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466722935005_-1790595621",
      "id": "20160623-200215_614757432",
      "dateCreated": "Jun 23, 2016 8:02:15 PM",
      "dateStarted": "Jul 2, 2016 11:33:48 AM",
      "dateFinished": "Jul 2, 2016 11:33:54 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:92"
    },
    {
      "title": "Operaciones sobre Secuencias",
      "text": "val range = (1 to 10).toList   \n//filter - deja solo los elementos mas grandes que 4   \nval moreThan4 = range.filter(_ > 4)  \nprintln(moreThan4)\n\n//map - transforma cada elemento de la secuencia\nval doubleIt = range2.map(_ * 2)  \nprintln(doubleIt)   ",
      "dateUpdated": "Aug 17, 2016 1:19:29 AM",
      "config": {
        "enabled": true,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 6,
        "editorHide": false,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466722935005_-1790595621",
      "id": "20160623-200215_1288429899",
      "dateCreated": "Jun 23, 2016 8:02:15 PM",
      "dateStarted": "Jul 2, 2016 11:33:52 AM",
      "dateFinished": "Jul 2, 2016 11:33:57 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:93"
    },
    {
      "text": "println(\"\"\"%html\n<script>\n    var heads = document.getElementsByTagName('h2');\n    var numHeads = heads.length;\n    var inner = \"\";\n    var i = 0;\n    var j = 0;\n    while (i < numHeads){\n        inner = heads[i].innerHTML;\n        heads[i].innerHTML = (i+1) + \".- \" + inner;\n        i++\n    }\n</script>\n\"\"\")",
      "dateUpdated": "Aug 17, 2016 8:20:16 AM",
      "config": {
        "colWidth": 12,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": false,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466722935010_-1803292334",
      "id": "20160623-200215_1294174914",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "<script>\n    var heads = document.getElementsByTagName('h2');\n    var numHeads = heads.length;\n    var inner = \"\";\n    var i = 0;\n    var j = 0;\n    while (i < numHeads){\n        inner = heads[i].innerHTML;\n        heads[i].innerHTML = (i+1) + \".- \" + inner;\n        i++\n    }\n</script>\n\n"
      },
      "dateCreated": "Jun 23, 2016 8:02:15 PM",
      "dateStarted": "Aug 17, 2016 8:19:28 AM",
      "dateFinished": "Aug 17, 2016 8:19:30 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:94",
      "focus": true
    },
    {
      "dateUpdated": "Jul 2, 2016 11:34:10 AM",
      "config": {
        "colWidth": 12,
        "graph": {
          "mode": "table",
          "height": 300,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1466735682513_30502341",
      "id": "20160623-233442_1133997844",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT"
      },
      "dateCreated": "Jun 23, 2016 11:34:42 PM",
      "dateStarted": "Jul 2, 2016 11:34:12 AM",
      "dateFinished": "Jul 2, 2016 11:34:12 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500,
      "$$hashKey": "object:95"
    }
  ],
  "name": "Tutorial Scala (parte1)",
  "id": "2BN7PPMM2",
  "angularObjects": {
    "2BQC1SZQM": [],
    "2BNWEWM7N": [],
    "2BR7UUV6M": [],
    "2BRYXU7JH": [],
    "2BP8MHHAQ": [],
    "2BQ76ANRJ": [],
    "2BRUR4E4E": [],
    "2BP1MSC5S": [],
    "2BQMZTCRG": [],
    "2BR8ZAQ7W": [],
    "2BRN67D4K": [],
    "2BR1CC4RY": [],
    "2BN1RC6KC": [],
    "2BR35MUDT": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}