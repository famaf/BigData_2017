{"paragraphs":[{"text":"val baseDir=\"https://cs.famaf.unc.edu.ar/~damian/bigdata/curso/posgrado_optativa/lectivo/presentaciones/03_rdd_notebook\"\nprint(\"\"\"%html\n<center>\n    <h1>Programación Distribuida sobre Grandes Volúmenes de Datos</h1>\n</center>\n\n<br>\n\n<h3 style=\"text-align:center;\">\n    <a href=\"http://www.famaf.unc.edu.ar\">\n    Facultad de Matemática Astronomía Física y Computación\n    </a>\n<br/>\n    <a href=\"http://www.unc.edu.ar\">\n    Universidad Nacional de Córdoba\n    </a>\n<br/>\n    <center>\n    <a href=\"http://www.famaf.unc.edu.ar\">\n    <img src=\"https://cs.famaf.unc.edu.ar/~damian/bigdata/curso/posgrado_optativa/lectivo/presentaciones/comun/logo%20UNC%20FAMAF%202016.svg\" alt=\"Drawing\" style=\"width:50%;\"/>\n    </a>\n    </center>\n</h3>\n\n<h4 style=\"text-align:center;\"> Damián Barsotti - Ezequiel Orbe </h4>\n\n<p style=\"font-size:15px;\">\n    <br />\n        This work is licensed under a\n        <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.\n    <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">\n        <img alt=\"Creative Commons License\" style=\"border-width:0;vertical-align:middle;float:right\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" />\n    </a>\n</p>\n\"\"\")\n","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<center>\n    <h1>Programación Distribuida sobre Grandes Volúmenes de Datos</h1>\n</center>\n\n<br>\n\n<h3 style=\"text-align:center;\">\n    <a href=\"http://www.famaf.unc.edu.ar\">\n    Facultad de Matemática Astronomía Física y Computación\n    </a>\n<br/>\n    <a href=\"http://www.unc.edu.ar\">\n    Universidad Nacional de Córdoba\n    </a>\n<br/>\n    <center>\n    <a href=\"http://www.famaf.unc.edu.ar\">\n    <img src=\"https://cs.famaf.unc.edu.ar/~damian/bigdata/curso/posgrado_optativa/lectivo/presentaciones/comun/logo%20UNC%20FAMAF%202016.svg\" alt=\"Drawing\" style=\"width:50%;\"/>\n    </a>\n    </center>\n</h3>\n\n<h4 style=\"text-align:center;\"> Damián Barsotti - Ezequiel Orbe </h4>\n\n<p style=\"font-size:15px;\">\n    <br />\n        This work is licensed under a\n        <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.\n    <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">\n        <img alt=\"Creative Commons License\" style=\"border-width:0;vertical-align:middle;float:right\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" />\n    </a>\n</p>\n"}]},"apps":[],"jobName":"paragraph_1504574500252_-122539961","id":"20160817-081203_553106990","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:63"},{"text":"%md #Tutorial Scala (parte 1)\n\nEste tutorial de `scala` ayudará a entender los conceptos básicos para programar en este lenguaje.\nSe presentarán los temas con la posibilidad de ejecutar y modificar los ejemplos en la misma página de lectura para que puedas probar y familiarizarte con el lenguaje.\n\n####Uso del notebook\n\n* Para ejecutar los programa presiona **[`Shift`]-[`Enter`]** o cliquea en el triangulito arriba a la derecha de cada celda.\n* Tambien podes copiar los programas dados en este notebook a un archivo y correrlo con un interprete `scala` con el siguiente comando `:load <nombre de archivo.scala>`.\n* Para hacer copy and paste desde el notebook selecciona con **[`Ctrl`]-[*flechitas*]** y hacer **[`Ctrl`]-[`c`]** y **[`Ctrl`]-[`v`]**.","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Tutorial Scala (parte 1)</h1>\n<p>Este tutorial de <code>scala</code> ayudará a entender los conceptos básicos para programar en este lenguaje.\n<br  />Se presentarán los temas con la posibilidad de ejecutar y modificar los ejemplos en la misma página de lectura para que puedas probar y familiarizarte con el lenguaje.</p>\n<h4>Uso del notebook</h4>\n<ul>\n<li>Para ejecutar los programa presiona <strong>[<code>Shift</code>]-[<code>Enter</code>]</strong> o cliquea en el triangulito arriba a la derecha de cada celda.</li>\n<li>Tambien podes copiar los programas dados en este notebook a un archivo y correrlo con un interprete <code>scala</code> con el siguiente comando <code>:load &lt;nombre de archivo.scala&gt;</code>.</li>\n<li>Para hacer copy and paste desde el notebook selecciona con <strong>[<code>Ctrl</code>]-[<em>flechitas</em>]</strong> y hacer <strong>[<code>Ctrl</code>]-[<code>c</code>]</strong> y <strong>[<code>Ctrl</code>]-[<code>v</code>]</strong>.</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1504574500265_-139853661","id":"20160817-081320_1105843555","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:64"},{"text":"%md ##Características Principales del Lenguaje","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Características Principales del Lenguaje</h2>\n"}]},"apps":[],"jobName":"paragraph_1504574500266_-138699415","id":"20160817-081732_753026246","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:65"},{"title":"Características Principales","text":"%md \n- `scala` (**scala**lable language) es un lenguaje desarrollado desde 2001 en el Programming Methods Laboratory de la EPFL bajo la dirección de [Martin Odersky](https://en.wikipedia.org/wiki/Martin_Odersky).\n\n- Fue diseñado con el objetivo de permitir su crecimiento en función a las necesidades de sus usuarios (de allí su nombre).\n\n- Combina conceptos de programación funcional y programación orientada a objetos en un lenguaje con **[tipado estático](http://stackoverflow.com/questions/1517582/what-is-the-difference-between-statically-typed-and-dynamically-typed-languages)**.\n\n- **Es** un lenguaje orientado a objetos puro (como Smalltalk) en el cual todo valor es un objeto y toda operación es una llamada a un método.\n\n- **No** es un lenguaje funcional puro (como Haskell) que fuerza a programar en un estilo funcional. \n\n-  Es un híbrido imperativo/funcional que permite programar en un estilo imperativo, aunque sugiere adoptar un estilo funcional.\n\n- Corre en la plataforma  JAVA e interopera con todas las librerías JAVA.\n\n- Bibliografía recomendada: \n    - **[Programming in Scala](http://booksites.artima.com/programming_in_scala_3ed)** (Martin Odersky, Lex Spoon, and Bill Venners) \n    - **[Documentación Oficial de Scala](http://www.scala-lang.org/documentation/)**\n","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<ul>\n<li><p><code>scala</code> (<strong>scala</strong>lable language) es un lenguaje desarrollado desde 2001 en el Programming Methods Laboratory de la EPFL bajo la dirección de <a href=\"https://en.wikipedia.org/wiki/Martin_Odersky\">Martin Odersky</a>.</p>\n</li>\n<li><p>Fue diseñado con el objetivo de permitir su crecimiento en función a las necesidades de sus usuarios (de allí su nombre).</p>\n</li>\n<li><p>Combina conceptos de programación funcional y programación orientada a objetos en un lenguaje con <strong><a href=\"http://stackoverflow.com/questions/1517582/what-is-the-difference-between-statically-typed-and-dynamically-typed-languages\">tipado estático</a></strong>.</p>\n</li>\n<li><p><strong>Es</strong> un lenguaje orientado a objetos puro (como Smalltalk) en el cual todo valor es un objeto y toda operación es una llamada a un método.</p>\n</li>\n<li><p><strong>No</strong> es un lenguaje funcional puro (como Haskell) que fuerza a programar en un estilo funcional.</p>\n</li>\n<li><p>Es un híbrido imperativo/funcional que permite programar en un estilo imperativo, aunque sugiere adoptar un estilo funcional.</p>\n</li>\n<li><p>Corre en la plataforma  JAVA e interopera con todas las librerías JAVA.</p>\n</li>\n<li><p>Bibliografía recomendada:</p>\n<ul>\n<li><strong><a href=\"http://booksites.artima.com/programming_in_scala_3ed\">Programming in Scala</a></strong> (Martin Odersky, Lex Spoon, and Bill Venners)</li>\n<li><strong><a href=\"http://www.scala-lang.org/documentation/\">Documentación Oficial de Scala</a></strong></li>\n</ul>\n</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1504574500267_-139084164","id":"20160703-233826_1193307973","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:66"},{"title":"Variables","text":"%md ##Variables","dateUpdated":"2017-09-04T22:21:40-0300","config":{"tableHide":false,"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":false,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Variables</h2>\n"}]},"apps":[],"jobName":"paragraph_1504574500268_-141007908","id":"20160817-002635_1001761052","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:67"},{"title":"","text":"%md\n- `scala` tiene dos tipos de variables: `vars` y `vals`.\n\n- Un variable `val` (a veces llamada directamente `valor`) es inmutable y no puede ser reasignada una vez inicializada.\n\t \n- Una variable `var`, por el contrario, es mutable y puede ser reasignada.\n\n- Al momento de declarar variables siempre hay que inicializarlas.\n\n---\n - El tipo de una variable se especifica luego del nombre de la misma separado por `:` (e.g.:`var x : <type>`)\n \n - El compilador `scala` hace **inferencia de tipos** por lo cual se pueden evitar las anotaciones de tipos.\n\n- Para mantener el código limpio, se recomienda evitar las anotaciones de tipos que no sean necesarias y dejar que el compilador los infiera.\n\n---\n- Es posible declarar y asignar múltiples variables al mismo tiempo.\n\n- Se pueden inicializar múltiples variables usando tuplas.","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":false,"results":[{"graph":{"mode":"table","height":492,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<ul>\n<li><p><code>scala</code> tiene dos tipos de variables: <code>vars</code> y <code>vals</code>.</p>\n</li>\n<li><p>Un variable <code>val</code> (a veces llamada directamente <code>valor</code>) es inmutable y no puede ser reasignada una vez inicializada.</p>\n</li>\n<li><p>Una variable <code>var</code>, por el contrario, es mutable y puede ser reasignada.</p>\n</li>\n<li><p>Al momento de declarar variables siempre hay que inicializarlas.</p>\n</li>\n</ul>\n<hr />\n<ul>\n<li><p>El tipo de una variable se especifica luego del nombre de la misma separado por <code>:</code> (e.g.:<code>var x : &lt;type&gt;</code>)</p>\n</li>\n<li><p>El compilador <code>scala</code> hace <strong>inferencia de tipos</strong> por lo cual se pueden evitar las anotaciones de tipos.</p>\n</li>\n<li><p>Para mantener el código limpio, se recomienda evitar las anotaciones de tipos que no sean necesarias y dejar que el compilador los infiera.</p>\n</li>\n</ul>\n<hr />\n<ul>\n<li><p>Es posible declarar y asignar múltiples variables al mismo tiempo.</p>\n</li>\n<li><p>Se pueden inicializar múltiples variables usando tuplas.</p>\n</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1504574500269_-141392657","id":"20160704-210357_412606283","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:68"},{"title":"Variables VAL","text":"//¿funciona?\n//No funciona porque los \"valores\" no se pueden modificar\nval x:Int = 2\nx = 3","dateUpdated":"2017-09-04T22:21:40-0300","config":{"tableHide":true,"editorSetting":{"language":"scala"},"colWidth":6,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"\nx: Int = 2\n\n\n\n<console>:27: error: reassignment to val\n       x = 3\n         ^\n"}]},"apps":[],"jobName":"paragraph_1504574500270_-140238410","id":"20160704-213534_1142623231","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:69"},{"title":"Variables VAR","text":"//¿funciona?\n//Si funciona porque las \"variables si se pueden modificar\"\nvar x:Int = 2\nx = 3","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{"language":"scala"},"colWidth":6,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nx: Int = 2\n\nx: Int = 3\n"}]},"apps":[],"jobName":"paragraph_1504574500271_-140623159","id":"20160704-213754_1736162540","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:70"},{"title":"Inferencia de Tipos","text":"//¿que tipos tienen las variables?\n//x: Int\n//x: String\n//x: List[Int]\nval x = 2\nval y = \"Scala!\"\nval z = List(1,2,3)","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{"language":"scala"},"colWidth":6,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nx: Int = 2\n\ny: String = Scala!\n\nz: List[Int] = List(1, 2, 3)\n"}]},"apps":[],"jobName":"paragraph_1504574500272_-130234939","id":"20160704-214246_1274038938","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:71"},{"title":"Declaraciones múltiples","text":"//¿que valores toman x,y,z en cada caso?\n//Int\n var x, y, z = 0\n var (x, y, z) = (1, 2, 3)","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{"language":"scala"},"colWidth":6,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n\n\nx: Int = 0\ny: Int = 0\nz: Int = 0\n\n\n\nx: Int = 1\ny: Int = 2\nz: Int = 3\n"}]},"apps":[],"jobName":"paragraph_1504574500272_-130234939","id":"20160704-232318_690063668","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:72"},{"title":"Funciones","text":"%md ##Funciones","dateUpdated":"2017-09-04T22:21:40-0300","config":{"tableHide":false,"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":false,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Funciones</h2>\n"}]},"apps":[],"jobName":"paragraph_1504574500273_-130619688","id":"20160816-205355_75257690","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:73"},{"title":"","text":"%md\n\n\n - La definición de una función comienza con la palabra clave `def` seguida por el nombre de la función y por una lista, separada por comas, de los parámetros de la función entre paréntesis.\n \n - Una anotación de tipo debe seguir a cada parámetro ya que el compilador no hace inferencia sobre los tipos de los parámetros.\n \n - Opcionalmente se puede indicar explícitamente el tipo que retorna la función luego de la lista de parámetros. Si no se indica el tipo, el compilador lo inferirá.\n \n- Si la función es recursiva **siempre** se debe indicar el tipo que retorna.\n\n- El cuerpo de una función está delimitado por llaves  `{ <body> }`. Si la función solo contiene una sentencia, se pueden omitir las llaves. \n\n- Por defecto, una función retorna el valor de la última expresión en su cuerpo y se puede omitir la palabra clave `return`. Si en cambio se quiere retornar un valor distinto al de la última expresión entonces se debe especificar con `return`. \n\n- Una función que retorna `Unit` no retorna un valor interesante y solo se ejecuta por sus efectos secundarios. `Unit` es el equivalente a `void` en C y Java. \n\n ---\n \n - Se pueden definir funciones dentro de otras funciones. Estas funciones anidadas son visibles solo dentro del bloque donde se las declara y pueden acceder a los parámetros de la función que las contiene.\n \n - `scala` también soporta: lista de parámetros de longitud variable, parámetros nombrados y valores por defecto. \n \n - `scala` también realiza la optimización de recursión a la cola (tail-recursion optimization). \n ","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":false,"results":[{"graph":{"mode":"table","height":95,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<ul>\n<li><p>La definición de una función comienza con la palabra clave <code>def</code> seguida por el nombre de la función y por una lista, separada por comas, de los parámetros de la función entre paréntesis.</p>\n</li>\n<li><p>Una anotación de tipo debe seguir a cada parámetro ya que el compilador no hace inferencia sobre los tipos de los parámetros.</p>\n</li>\n<li><p>Opcionalmente se puede indicar explícitamente el tipo que retorna la función luego de la lista de parámetros. Si no se indica el tipo, el compilador lo inferirá.</p>\n</li>\n<li><p>Si la función es recursiva <strong>siempre</strong> se debe indicar el tipo que retorna.</p>\n</li>\n<li><p>El cuerpo de una función está delimitado por llaves  <code>{ &lt;body&gt; }</code>. Si la función solo contiene una sentencia, se pueden omitir las llaves.</p>\n</li>\n<li><p>Por defecto, una función retorna el valor de la última expresión en su cuerpo y se puede omitir la palabra clave <code>return</code>. Si en cambio se quiere retornar un valor distinto al de la última expresión entonces se debe especificar con <code>return</code>.</p>\n</li>\n<li><p>Una función que retorna <code>Unit</code> no retorna un valor interesante y solo se ejecuta por sus efectos secundarios. <code>Unit</code> es el equivalente a <code>void</code> en C y Java.</p>\n<hr />\n</li>\n<li><p>Se pueden definir funciones dentro de otras funciones. Estas funciones anidadas son visibles solo dentro del bloque donde se las declara y pueden acceder a los parámetros de la función que las contiene.</p>\n</li>\n<li><p><code>scala</code> también soporta: lista de parámetros de longitud variable, parámetros nombrados y valores por defecto.</p>\n</li>\n<li><p><code>scala</code> también realiza la optimización de recursión a la cola (tail-recursion optimization).</p>\n</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1504574500274_-129465441","id":"20160816-204514_471265966","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:74"},{"title":"Definición de Función","text":"def max(x: Int, y: Int) : Int = {\n\tif (x > y)\n\t\tx\n\telse\n\t\ty\n}","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{"language":"scala"},"colWidth":6,"editorMode":"ace/mode/scala","title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nmax: (x: Int, y: Int)Int\n"}]},"apps":[],"jobName":"paragraph_1504574500274_-129465441","id":"20160816-204813_1453918901","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:75"},{"title":"Definición sin especificación de tipos de los Parametros","text":"//¿funciona?\n//No funciona porque los parametros tienen que tener anotado el tipo\ndef min(x, y) = {\n\tif (x > y)\n\t\tx\n\telse\n\t\ty\n}\n","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{"language":"scala"},"colWidth":6,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"\n\n\n<console>:3: error: ':' expected but ',' found.\ndef min(x, y) = {\n         ^\n"}]},"apps":[],"jobName":"paragraph_1504574500275_-129850190","id":"20160816-205047_1696755979","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:76"},{"title":"Definición omitiendo el tipo que se retorna","text":"//¿que tipo retorna?\n//Int\ndef max(x: Int, y: Int) = {\n\tif (x > y)\n\t\tx\n\telse\n\t\ty\n}","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{"language":"scala"},"colWidth":6,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nmax: (x: Int, y: Int)Int\n"}]},"apps":[],"jobName":"paragraph_1504574500275_-129850190","id":"20160816-205216_1228789597","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:77"},{"title":"Función recursiva","text":"//¿fuciona?\n//No, porque: Funcion Recursiva ==> Especificar el tipo que se retorna\ndef inc(x: Int, n: Int) = {\n\tif (x < n)\n\t\tinc((x+1), n)\n\telse\n\t\tx\n}   ","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{"language":"scala"},"colWidth":6,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"\n\n\n<console>:31: error: recursive method inc needs result type\n       \t\tinc((x+1), n)\n                ^\n"}]},"apps":[],"jobName":"paragraph_1504574500276_-131773934","id":"20160816-205308_433997936","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:78"},{"title":"Funciones anidadas","text":"//¿Es visible buildString fuera de printFullName?\n//No, no es visible fuera de printFullName, solo es visible dentro\n//==============================\n//Agregue parametros por defecto\ndef printFullName(name: String = \"Mario\", lastname: String = \"Ferreyra\") = {\n\tdef buildString() = {\n\t\t\"Hello \" + name + \" \" + lastname + \"!!\"\n\t}\n\tprintln(buildString)\n} \n\nprintFullName(\"Luis\", \"Sosa\")\nprintFullName()","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{"language":"scala"},"colWidth":6,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nprintFullName: (name: String, lastname: String)Unit\nHello Luis Sosa!!\nHello Mario Ferreyra!!\n"}]},"apps":[],"jobName":"paragraph_1504574500277_-132158683","id":"20160816-223716_543125792","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:79"},{"title":"Uso del Return","text":"//¿que retorna?\n//Preguntar !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//¿Äl hacer uso del Return se debe establecer el tipo que se retorna?\ndef max2(x: Int, y: Int) = {\n\tif (x > y)\n\t\treturn x\n\telse\n\t\treturn y\n\t0\n}","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{"language":"scala"},"colWidth":6,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"\n\n\n<console>:33: error: method max2 has return statement; needs result type\n       \t\treturn x\n                ^\n\n\n\n<console>:35: error: method max2 has return statement; needs result type\n       \t\treturn y\n                ^\n"}]},"apps":[],"jobName":"paragraph_1504574500278_-131004437","id":"20160816-205304_1477244175","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:80"},{"title":"Nro. de parámetros variable","text":"//¿funciona?\n//Preguntar !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\ndef echo(args: String*) =\n    for (arg <- args) println(arg)\n\necho(\"hola\")\necho(\"hola\", \"chau\")\n//parámetros nombrados.\n\n//parámetros por defecto.","dateUpdated":"2017-09-04T22:21:40-0300","config":{"tableHide":false,"editorSetting":{"language":"scala"},"colWidth":6,"editorMode":"ace/mode/scala","editorHide":false,"title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\necho: (args: String*)Unit\nhola\nhola\nchau\n"}]},"apps":[],"jobName":"paragraph_1504574500279_-131389186","id":"20160816-234315_448901351","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:81"},{"title":"Omitiendo las llaves","text":"//¿que tipo retorna?\n//Int\ndef square(x: Int) = x*x","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{"language":"scala"},"colWidth":6,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nsquare: (x: Int)Int\n"}]},"apps":[],"jobName":"paragraph_1504574500280_-133312930","id":"20160816-205649_1284984828","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:82"},{"title":"Function Literals","text":"%md ##Function Literals","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":false,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Function Literals</h2>\n"}]},"apps":[],"jobName":"paragraph_1504574500280_-133312930","id":"20160817-010628_484969835","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:83"},{"title":"Function Literals","text":"%md \n\n- En Scala las funciones son valores de primera clase (first-class values). No solo se pueden definir funciones, sino que también se pueden definir literales de función (function literals) y tratarlas como valores.\n\n- Un **literal de función** se define especificando una lista de parámetros entre paréntesis, el símbolo `=>`y el cuerpo de la función.\n- Si el cuerpo del literal de función contiene más de una sentencia se puede definir el cuerpo entre llaves. `{ <body> }`\n\n- Un literal de función se puede definir de forma concisa de la siguiente forma:\n\t- Omitiendo el tipo de los parámetros \n\t- Omitiendo los paréntesis.\n\t- Usando `_` como placeholder para uno o más parámetros.\n\t- Múltiples `_` implican múltiples parámetros, no la reutilización de un","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":false,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<ul>\n<li><p>En Scala las funciones son valores de primera clase (first-class values). No solo se pueden definir funciones, sino que también se pueden definir literales de función (function literals) y tratarlas como valores.</p>\n</li>\n<li><p>Un <strong>literal de función</strong> se define especificando una lista de parámetros entre paréntesis, el símbolo <code>=&gt;</code>y el cuerpo de la función.</p>\n</li>\n<li><p>Si el cuerpo del literal de función contiene más de una sentencia se puede definir el cuerpo entre llaves. <code>{ &lt;body&gt; }</code></p>\n</li>\n<li><p>Un literal de función se puede definir de forma concisa de la siguiente forma:</p>\n<ul>\n<li>Omitiendo el tipo de los parámetros</li>\n<li>Omitiendo los paréntesis.</li>\n<li>Usando <code>_</code> como placeholder para uno o más parámetros.</li>\n<li>Múltiples <code>_</code> implican múltiples parámetros, no la reutilización de un</li>\n</ul>\n</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1504574500281_-133697679","id":"20160816-235432_58239161","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:84"},{"title":"Definición de un function literal","text":"//¿que tipos retornan?\n//Int\nvar increase = (x: Int) => x + 1\nvar sum = (x: Int, y: Int) => x + y\nvar a: Int = 0\na = sum(2, 4)\nprintln(a)\nprintln(sum(2, 4))","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{"language":"scala"},"colWidth":6,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nincrease: Int => Int = <function1>\n\nsum: (Int, Int) => Int = <function2>\n\na: Int = 0\n\na: Int = 6\n6\n6\n"}]},"apps":[],"jobName":"paragraph_1504574500282_-132543432","id":"20160816-235521_448466848","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:85"},{"title":"Variantes sintácticas","text":"val someNumbers = List(-2, -1, 0, 1, 2)\n\nvar mi_filtro = (x: Int) => x > 0 //Agrego yo\n\n//¿retornan lo mismo?\nsomeNumbers.filter(mi_filtro)\nprintln(\"==========================\") //Agrego yo\nsomeNumbers.filter((x: Int) => x > 0)\nsomeNumbers.filter((x) => x > 0)\nsomeNumbers.filter(x => x > 0)\nsomeNumbers.filter(_ > 0)\n\n//¿porque funciona esto?\n//Preguntar !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nprintln(\"==========================\") //Agrego yo\nsomeNumbers.fold(0)(_+_)","dateUpdated":"2017-09-04T22:21:40-0300","config":{"tableHide":false,"editorSetting":{"language":"scala"},"colWidth":6,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nsomeNumbers: List[Int] = List(-2, -1, 0, 1, 2)\n\nmi_filtro: Int => Boolean = <function1>\n\nres259: List[Int] = List(1, 2)\n==========================\n\nres261: List[Int] = List(1, 2)\n\nres262: List[Int] = List(1, 2)\n\nres263: List[Int] = List(1, 2)\n\nres264: List[Int] = List(1, 2)\n==========================\n\nres269: Int = 0\n"}]},"apps":[],"jobName":"paragraph_1504574500283_-132928181","id":"20160816-235858_384188929","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:86"},{"title":"Ejemplos","text":"def add1(x:Int, y:Int) = x + y // función ¿NO ES METODO?\n\nval add2 = (x: Int, y: Int) => x + y //función anónima  \nval add3:(Int, Int) => Int = _ + _ // otra forma\nval add4 = (_ + _): (Int, Int) => Int //otra forma más   \n\nprintln(add1(42,13), add2(42,13), add3(42,13), add4(42,13), add5(42,13))\n\nval add5 = add1 _ // Convierte método en función\ndef add6(x: Int, y: Int) = add2(x, y)  // Convierte función en método\n\nprintln(add5(42,13), add6(42,13))","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{"language":"scala"},"colWidth":6,"editorMode":"ace/mode/scala","editorHide":false,"title":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"\nadd1: (x: Int, y: Int)Int\n\nadd2: (Int, Int) => Int = <function2>\n\nadd3: (Int, Int) => Int = <function2>\n\nadd4: (Int, Int) => Int = <function2>\n\n\n\n<console>:38: error: too many arguments for method println: (x: Any)Unit\n       println(add1(42,13), add2(42,13), add3(42,13), add4(42,13), add5(42,13))\n              ^\n"}]},"apps":[],"jobName":"paragraph_1504574500284_-134851926","id":"20160623-200215_54822284","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:87"},{"title":"Ejemplos","text":"%md\n* El primer ejemplo (`add1`) define un función como ya vimos\n* El segundo es como en el ejemplo anterior solo que asignando la función a una variable. Esto hace que se le ponga un nombre a la función anónima (`add2`)\n* El tercer y cuarto ejemplo usa los guiones bajos (`_`) como ya vimos. Esta forma es poco usada en `scala` cuando se definen funciones. Se usa frecuentemente cuando la función anónima se pasa como parámetro (alto orden).\n* Después de ejecutar este ejemplo compare los tipos de las funciones `add1` y las demás. \n* En `scala` las funciones y los métodos no son lo mismo pero se pueden convertir (ver `add5` y `add6`). \n","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{},"editorMode":"ace/mode/markdown","colWidth":6,"editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<ul>\n<li>El primer ejemplo (<code>add1</code>) define un función como ya vimos</li>\n<li>El segundo es como en el ejemplo anterior solo que asignando la función a una variable. Esto hace que se le ponga un nombre a la función anónima (<code>add2</code>)</li>\n<li>El tercer y cuarto ejemplo usa los guiones bajos (<code>_</code>) como ya vimos. Esta forma es poco usada en <code>scala</code> cuando se definen funciones. Se usa frecuentemente cuando la función anónima se pasa como parámetro (alto orden).</li>\n<li>Después de ejecutar este ejemplo compare los tipos de las funciones <code>add1</code> y las demás.</li>\n<li>Como ya se mencionó en <code>scala</code> las funciones y los métodos no son lo mismo pero se pueden convertir (ver <code>add5</code> y <code>add6</code>).</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1504574500285_-135236675","id":"20160623-200215_1324927078","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:88"},{"title":"Cosas que te pueden interesar","text":"%md \n* [Scala Functions vs Methods](http://jim-mcbeath.blogspot.com.ar/2009/05/scala-functions-vs-methods.html).\n* [Functional Scala: Turning Methods into Functions (or WTF is eta expansion?)](https://gleichmann.wordpress.com/2011/01/09/functional-scala-turning-methods-into-functions/).\n*  [Más sobre funciones anónimas](http://docs.scala-lang.org/tutorials/tour/anonymous-function-syntax.html).","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<ul>\n<li><a href=\"http://jim-mcbeath.blogspot.com.ar/2009/05/scala-functions-vs-methods.html\">Scala Functions vs Methods</a>.</li>\n<li><a href=\"https://gleichmann.wordpress.com/2011/01/09/functional-scala-turning-methods-into-functions/\">Functional Scala: Turning Methods into Functions (or WTF is eta expansion?)</a>.</li>\n<li><a href=\"http://docs.scala-lang.org/tutorials/tour/anonymous-function-syntax.html\">Más sobre funciones anónimas</a>.</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1504574500286_-134082428","id":"20160817-003508_150760482","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:89"},{"text":"%md ##Estructuras de Control","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Estructuras de Control</h2>\n"}]},"apps":[],"jobName":"paragraph_1504574500287_-134467177","id":"20160623-200215_23879145","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:90"},{"title":"While","text":"%md &nbsp;\n- `scala` tiene la sentencia `while` para crear bucles. \n- No tiene el *clásico* bucle `for` de C, Java, Fortran, etc.\n- `scala` no tiene por defecto los operadores de decremento `--` e incremento `++` pero se pueden usar los operadores `-=` y `+=` para hacer lo mismo.","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{},"editorMode":"ace/mode/markdown","colWidth":6,"editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>&nbsp;</p>\n<ul>\n<li><code>scala</code> tiene la sentencia <code>while</code> para crear bucles.</li>\n<li>No tiene el <em>clásico</em> bucle <code>for</code> de C, Java, Fortran, etc.</li>\n<li><code>scala</code> no tiene por defecto los operadores de decremento <code>--</code> e incremento <code>++</code> pero se pueden usar los operadores <code>-=</code> y <code>+=</code> para hacer lo mismo.</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1504574500288_-148702886","id":"20160623-200215_838802559","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:91"},{"title":"While","text":"var i, sum = 0\n//Formula: (a * (a+1))/2\n//En este caso: a = 9 (porque el 0 no suma nada =P)\nwhile (i < 10) {  \n  sum += i  \n  i+=1  \n}  \nprintln(sum)\n","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","colWidth":6,"editorHide":false,"title":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\n\ni: Int = 0\nsum: Int = 0\n45\n"}]},"apps":[],"jobName":"paragraph_1504574500289_-149087635","id":"20160623-200215_1076609123","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:92"},{"title":"For","text":"%md &nbsp;\n- `scala` tiene una sentencia `for` distinta que la de los lenguajes C, Java, etc. con la cual se puede simular la de estos lenguajes.\n- La sentencia `for` es en realidad muy poderosa. \n- En el siguiente ejemplo la sentencia `for` toma los posibles valores de la variable `i` de una secuencia (ya lo vimos).\n- Para más información ver: [Bucles en Scala](http://www.tutorialspoint.com/scala/scala_for_loop.htm).","dateUpdated":"2017-09-04T22:21:40-0300","config":{"tableHide":false,"editorSetting":{},"editorMode":"ace/mode/markdown","colWidth":6,"editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>&nbsp;</p>\n<ul>\n<li><code>scala</code> tiene una sentencia <code>for</code> distinta que la de los lenguajes C, Java, etc. con la cual se puede simular la de estos lenguajes.</li>\n<li>La sentencia <code>for</code> es en realidad muy poderosa.</li>\n<li>En el siguiente ejemplo la sentencia <code>for</code> toma los posibles valores de la variable <code>i</code> de una secuencia (ya lo vimos).</li>\n<li>Para más información ver: <a href=\"http://www.tutorialspoint.com/scala/scala_for_loop.htm\">Bucles en Scala</a>.</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1504574500290_-147933388","id":"20160623-200215_1753481700","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:93"},{"title":"For","text":"var sum = 0\n// 0 until 10 <==> [0 ... 10)\n//El \"<-\" es equivalente al \"in\" de Python\n//for(i <- 0 until 10) <=(Python)=> for i in range(0, 10)\nfor (i <- 0 until 10) {\n  sum += i  \n}  \nprintln(sum)\n\nfor (i <- List(1,2,3)) println(i)\n\n","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{"language":"scala"},"colWidth":6,"editorMode":"ace/mode/scala","editorHide":false,"title":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nsum: Int = 0\n45\n1\n2\n3\n"}]},"apps":[],"jobName":"paragraph_1504574500291_-148318137","id":"20160623-200215_567407727","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:94"},{"title":"Bucles implícitos","text":"%md &nbsp;\n- En `scala` se pueden definir bucles de manera funcional (declarativa) aprovechando los métodos propios de las secuencias<sep>1</sep>, como `sum` en el siguiente ejemplo.\n\n- Los métodos para secuencias pueden encontrarse en [API GenTraversableOnce](http://www.scala-lang.org/api/current/index.html#scala.collection.GenTraversableOnce).","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":6,"editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>&nbsp;</p>\n<ul>\n<li><p>En <code>scala</code> se pueden definir bucles de manera funcional (declarativa) aprovechando los métodos propios de las secuencias<sep>1</sep>, como <code>sum</code> en el siguiente ejemplo.</p>\n</li>\n<li><p>Los métodos para secuencias pueden encontrarse en <a href=\"http://www.scala-lang.org/api/current/index.html#scala.collection.GenTraversableOnce\">API GenTraversableOnce</a>.</p>\n</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1504574500292_-150241882","id":"20160623-200215_249693191","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:95"},{"title":"Bucles Implícitos","text":"(0 until 10).sum //Suma todos los elementos de [0 ... 10)\n(1 until 10 by 2).product //Hace el producto de [1, 3, 5, 7, 9]\n//(1 until 10 by 2) <=(Python)=> range(1, 10, 2) va de 2 en dos\n\n\n","dateUpdated":"2017-09-04T22:21:40-0300","config":{"tableHide":false,"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","colWidth":6,"editorHide":false,"title":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nres317: Int = 45\n\nres318: Int = 945\n"}]},"apps":[],"jobName":"paragraph_1504574500293_-150626631","id":"20160623-200215_540994360","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:96"},{"title":"If","text":"%md \n- Los `if`'s funcionan igual que en todos los lenguajes.\n- En `scala` todas las construcciones son expresiones, inclusive las sentencias `if`.","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{},"editorMode":"ace/mode/markdown","colWidth":6,"editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<ul>\n<li>Los <code>if</code>'s funcionan igual que en todos los lenguajes.</li>\n<li>En <code>scala</code> todas las construcciones son expresiones, inclusive las sentencias <code>if</code>.</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1504574500294_-149472384","id":"20160623-200215_1820589274","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:97"},{"title":"If","text":"if (true)   \n  println(\"no son necesarias la llaves con una sola sentencia\")  \n\nif (1 + 1 == 2) {  \n  println(\"multiples\")  \n  println(\"sentencias\")  \n  println(\"requieren\")  \n  println(\"llaves\")  \n} else {  \n  println(\"la matemática está equivocada!\")  \n  println(\"o su computadora se volvió loca\")  \n}  \n\n//if como expresion\nval vegano = false\nval almuerzo = if (vegano) \"lechuga\" else \"choripan\"  \n\nprintln(almuerzo)  ","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{"language":"scala"},"colWidth":6,"editorMode":"ace/mode/scala","editorHide":false,"title":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"no son necesarias la llaves con una sola sentencia\nmultiples\nsentencias\nrequieren\nllaves\n\nvegano: Boolean = false\n\nalmuerzo: String = choripan\nchoripan\n"}]},"apps":[],"jobName":"paragraph_1504574500295_-149857133","id":"20160623-200215_1927221105","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:98"},{"text":"%md ##Operaciones útiles\n\nA continuación veremos algunos ejemplos de diferentes operaciones que resultan muy útiles en `scala`. Experimenta con los ejemplos. Algunos conceptos que aparecen van a ser explicados después.","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Operaciones útiles</h2>\n<p>A continuación veremos algunos ejemplos de diferentes operaciones que resultan muy útiles en <code>scala</code>. Experimenta con los ejemplos. Algunos conceptos que aparecen van a ser explicados después.</p>\n"}]},"apps":[],"jobName":"paragraph_1504574500296_-151780877","id":"20160623-200215_1819320049","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:99"},{"title":"Imprimir en Pantalla","text":"%md \n- Scala tiene un *shortcut* al `Sistem.out.println` de Java como así también `print`, `printf`, etc.\n- Se puede usar `printf`. Ver [Printf cheat sheet](http://alvinalexander.com/programming/printf-format-cheat-sheet).\n- Todas están definidas en una clase que se importa por defecto (`scala.Predef`). \n\n- Para más información ver: [scala.Predef](http://www.scala-lang.org/api/current/index.html#scala.Predef$).","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{},"editorMode":"ace/mode/markdown","colWidth":6,"editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<ul>\n<li><p>Scala tiene un <em>shortcut</em> al <code>Sistem.out.println</code> de Java como así también <code>print</code>, <code>printf</code>, etc.</p>\n</li>\n<li><p>Se puede usar <code>printf</code>. Ver <a href=\"http://alvinalexander.com/programming/printf-format-cheat-sheet\">Printf cheat sheet</a>.</p>\n</li>\n<li><p>Todas están definidas en una clase que se importa por defecto (<code>scala.Predef</code>).</p>\n</li>\n<li><p>Para más información ver: <a href=\"http://www.scala-lang.org/api/current/index.html#scala.Predef$\">scala.Predef</a>.</p>\n</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1504574500297_-152165626","id":"20160623-200215_1667859618","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:100"},{"title":"Imprimir en pantalla","text":"\n//usando println\nprintln(\"Hola mundo\")\n\n//usando printf\nprintf(\"El número que le sigue a 2 es %.16f (casi).\", Math.nextAfter(2.0, 3))\n\n","dateUpdated":"2017-09-04T22:21:40-0300","config":{"tableHide":false,"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","colWidth":6,"editorHide":false,"title":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Hola mundo\nEl número que le sigue a 2 es 2,0000000000000004 (casi)."}]},"apps":[],"jobName":"paragraph_1504574500297_-152165626","id":"20160623-200215_810868533","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:101"},{"title":"Interpolación de Strings","text":"%md \n- Es un mecanismo que permite embeber valores de variables dentro de un string.\n- Se indica mediante una `s` delante de la primer comilla del string.\n- También se pueden embeber expresiones más compejas encerrándolas entre llaves:\n\n- Para más información ver: [String interpolation in Scala](http://docs.scala-lang.org/overviews/core/string-interpolation.html).","dateUpdated":"2017-09-04T22:21:40-0300","config":{"tableHide":false,"editorSetting":{},"editorMode":"ace/mode/markdown","colWidth":6,"editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<ul>\n<li><p>Es un mecanismo que permite embeber valores de variables dentro de un string.</p>\n</li>\n<li><p>Se indica mediante una <code>s</code> delante de la primer comilla del string.</p>\n</li>\n<li><p>También se pueden embeber expresiones más compejas encerrándolas entre llaves:</p>\n</li>\n<li><p>Para más información ver: <a href=\"http://docs.scala-lang.org/overviews/core/string-interpolation.html\">String interpolation in Scala</a>.</p>\n</li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1504574500298_-151011379","id":"20160623-200215_439954318","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:102"},{"title":"Interpolación de Strings","text":"import scala.math._  \nval dosPi = Pi*2\nprintln(s\"Dame $dosPi zas\")\nprintln(s\"Mejor dame ${4 * Pi} zas\")\n","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","colWidth":6,"editorHide":false,"title":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nimport scala.math._\n\ndosPi: Double = 6.283185307179586\nDame 6.283185307179586 zas\nMejor dame 12.566370614359172 zas\n"}]},"apps":[],"jobName":"paragraph_1504574500299_-151396128","id":"20160623-200215_903540991","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:103"},{"title":"Rangos","text":"//crea un range entre 1 y 10 inclusive: [1 ... 10]\nval range = 1 to 10   \n//crea un range entre 1 y 10 excluyéndolo: [1 ... 10)\nval range2 = 1 until 10   \n//desde 2 a 10 saltando de a 3: [2, 5, 8]\nval range3 = 2 until 10 by 3\n// Convierte a lista\nprintln(range3.toList)  ","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","colWidth":6,"editorHide":false,"title":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nrange: scala.collection.immutable.Range.Inclusive = Range(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\nrange2: scala.collection.immutable.Range = Range(1, 2, 3, 4, 5, 6, 7, 8, 9)\n\nrange3: scala.collection.immutable.Range = Range(2, 5, 8)\nList(2, 5, 8)\n"}]},"apps":[],"jobName":"paragraph_1504574500300_-153319873","id":"20160623-200215_1180409461","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:104"},{"title":"Números","text":"val num = -5  \nval numAbs = num.abs //valor absoluto  \nval max5or7 = numAbs.max(7) //maximo entre numAbs y 7\nval min5or7 = numAbs.min(7) //minimo entre numAbs y 7\nprintln(numAbs) \nprintln(max5or7)   \nprintln(min5or7)   \n","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","colWidth":6,"editorHide":false,"title":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nnum: Int = -5\n\nnumAbs: Int = 5\n\nmax5or7: Int = 7\n\nmin5or7: Int = 5\n5\n7\n5\n"}]},"apps":[],"jobName":"paragraph_1504574500301_-153704622","id":"20160623-200215_1422775772","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:105"},{"title":"Operaciones sobre Strings","text":"val reverse = \"Scala\".reverse //da vuelta el string   \nprintln(reverse)\n\nval cap = \"scala\".capitalize //Pone primera letra en mayúscula  \nprintln(cap)\ntoList\nval multi = \"Scala!\" * 7 //repite n veces   \nprintln(multi)\n\nval int = \"123\".toInt //parsea a Int  \nprintln(int)  ","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","colWidth":6,"editorHide":false,"title":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nreverse: String = alacS\nalacS\n\ncap: String = Scala\nScala\n\nmulti: String = Scala!Scala!Scala!Scala!Scala!Scala!Scala!\nScala!Scala!Scala!Scala!Scala!Scala!Scala!\n\nint: Int = 123\n123\n"}]},"apps":[],"jobName":"paragraph_1504574500302_-152550375","id":"20160623-200215_614757432","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:106"},{"title":"Operaciones sobre Secuencias","text":"val range = (1 to 10).toList   \n//filter - deja solo los elementos mas grandes que 4   \nval moreThan4 = range.filter(_ > 4)  \nprintln(moreThan4)\n\n//map - transforma cada elemento de la secuencia\nval doubleIt = range2.map(_ * 2) //Es el range2 de la seccion \"Rangos\"\nprintln(doubleIt)   ","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","colWidth":6,"editorHide":false,"title":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nrange: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\nmoreThan4: List[Int] = List(5, 6, 7, 8, 9, 10)\nList(5, 6, 7, 8, 9, 10)\n\ndoubleIt: scala.collection.immutable.IndexedSeq[Int] = Vector(2, 4, 6, 8, 10, 12, 14, 16, 18)\nVector(2, 4, 6, 8, 10, 12, 14, 16, 18)\n"}]},"apps":[],"jobName":"paragraph_1504574500303_-152935124","id":"20160623-200215_1288429899","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:107"},{"text":"println(\"\"\"%html\n<script>\n    var heads = document.getElementsByTagName('h2');\n    var numHeads = heads.length;\n    var inner = \"\";\n    var i = 0;\n    var j = 0;\n    while (i < numHeads){\n        inner = heads[i].innerHTML;\n        heads[i].innerHTML = (i+1) + \".- \" + inner;\n        i++\n    }\n</script>\n\"\"\")","dateUpdated":"2017-09-04T22:21:40-0300","config":{"tableHide":true,"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<script>\n    var heads = document.getElementsByTagName('h2');\n    var numHeads = heads.length;\n    var inner = \"\";\n    var i = 0;\n    var j = 0;\n    while (i < numHeads){\n        inner = heads[i].innerHTML;\n        heads[i].innerHTML = (i+1) + \".- \" + inner;\n        i++\n    }\n</script>\n\n"}]},"apps":[],"jobName":"paragraph_1504574500304_-142546904","id":"20160623-200215_1294174914","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:108"},{"text":"","dateUpdated":"2017-09-04T22:21:40-0300","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1504574500305_-142931653","id":"20160623-233442_1133997844","dateCreated":"2017-09-04T22:21:40-0300","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:109"}],"name":"Tutorial Scala (parte1)","id":"2CTDQ733B","angularObjects":{"2CQY683MD:shared_process":[],"2CRGPDJTN:shared_process":[],"2CTZD3XCX:shared_process":[],"2CRMCDEQM:shared_process":[],"2CTAV9E28:shared_process":[],"2CRA7KCDA:shared_process":[],"2CQ81X7G5:shared_process":[],"2CRUQ6EVN:shared_process":[],"2CTHYC7X9:shared_process":[],"2CRHWDFYM:shared_process":[],"2CQJ7MXW5:shared_process":[],"2CQAR5VSM:shared_process":[],"2CRCFF6HB:shared_process":[],"2CTK8TR8Q:shared_process":[],"2CQN5Q87B:shared_process":[],"2CTW5YZGW:shared_process":[],"2CSR7EJVT:shared_process":[],"2CRUQ7EXT:shared_process":[],"2CRFFBRXJ:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}